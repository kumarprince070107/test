{"version":3,"file":"Ask-rzQ-HxZU.js","sources":["../../../frontend/src/pages/ask/Ask.tsx"],"sourcesContent":["import { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Checkbox, Panel, DefaultButton, Spinner, TextField, ICheckboxProps, ITextFieldProps } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"D:/azure/app/frontend/src/pages/ask/braein.png\";\r\nimport styles from \"./Ask.module.css\";\r\n\r\nimport { askApi, configApi, ChatAppResponse, ChatAppRequest, RetrievalMode, VectorFieldOptions, GPT4VInput, SpeechConfig } from \"../../api\";\r\nimport { Answer, AnswerError } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { SettingsButton } from \"../../components/SettingsButton/SettingsButton\";\r\nimport { useLogin, getToken, requireAccessControl, checkLoggedIn } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { UploadFile } from \"../../components/UploadFile\";\r\n\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\r\n\r\nexport function Component(): JSX.Element {\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [promptTemplatePrefix, setPromptTemplatePrefix] = useState<string>(\"\");\r\n    const [promptTemplateSuffix, setPromptTemplateSuffix] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [seed, setSeed] = useState<number | null>(null);\r\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\r\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\r\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\r\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\r\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\r\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\r\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\r\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\r\n    const audio = useRef(new Audio()).current;\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n    const [answer, setAnswer] = useState<ChatAppResponse>();\r\n    // For the Ask tab, this array will hold a maximum of one URL\r\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\r\n\r\n    const speechConfig: SpeechConfig = {\r\n        speechUrls,\r\n        setSpeechUrls,\r\n        audio,\r\n        isPlaying,\r\n        setIsPlaying\r\n    };\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    const getConfig = async () => {\r\n        configApi().then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n            setUseSemanticRanker(config.showSemanticRankerOption);\r\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\r\n            setShowVectorOption(config.showVectorOption);\r\n            if (!config.showVectorOption) {\r\n                setRetrievalMode(RetrievalMode.Text);\r\n            }\r\n            setShowUserUpload(config.showUserUpload);\r\n            setshowLanguagePicker(config.showLanguagePicker);\r\n            setShowSpeechInput(config.showSpeechInput);\r\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\r\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const request: ChatAppRequest = {\r\n                messages: [\r\n                    {\r\n                        content: question,\r\n                        role: \"user\"\r\n                    }\r\n                ],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        prompt_template_prefix: promptTemplatePrefix.length === 0 ? undefined : promptTemplatePrefix,\r\n                        prompt_template_suffix: promptTemplateSuffix.length === 0 ? undefined : promptTemplateSuffix,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        temperature: temperature,\r\n                        minimum_reranker_score: minimumRerankerScore,\r\n                        minimum_search_score: minimumSearchScore,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput,\r\n                        language: i18n.language,\r\n                        ...(seed !== null ? { seed: seed } : {})\r\n                    }\r\n                },\r\n                // AI Chat Protocol: Client must pass on any session state received from the server\r\n                session_state: answer ? answer.session_state : null\r\n            };\r\n            const result = await askApi(request, token);\r\n            console.log(result);\r\n            setAnswer(result);\r\n            setSpeechUrls([null]);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onTemperatureChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setTemperature(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onSeedChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setSeed(parseInt(newValue || \"\"));\r\n    };\r\n\r\n    const onMinimumSearchScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumSearchScore(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onMinimumRerankerScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumRerankerScore(parseFloat(newValue || \"0\"));\r\n    };\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n        setQuestion(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs) => {\r\n        if (activeAnalysisPanelTab === tab) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    // IDs for form labels and their associated callouts\r\n    const promptTemplateId = useId(\"promptTemplate\");\r\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\r\n    const temperatureId = useId(\"temperature\");\r\n    const temperatureFieldId = useId(\"temperatureField\");\r\n    const seedId = useId(\"seed\");\r\n    const seedFieldId = useId(\"seedField\");\r\n    const searchScoreId = useId(\"searchScore\");\r\n    const searchScoreFieldId = useId(\"searchScoreField\");\r\n    const rerankerScoreId = useId(\"rerankerScore\");\r\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\r\n    const retrieveCountId = useId(\"retrieveCount\");\r\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\r\n    const excludeCategoryId = useId(\"excludeCategory\");\r\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\r\n    const semanticRankerId = useId(\"semanticRanker\");\r\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\r\n    const semanticCaptionsId = useId(\"semanticCaptions\");\r\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\r\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\r\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\r\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\r\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <div className={styles.askContainer}>\r\n            {/* Setting the page title using react-helmet-async */}\r\n            <Helmet>\r\n                <title>{t(\"pageTitle\")}</title>\r\n            </Helmet>\r\n            <div className={styles.askTopSection}>\r\n                <div className={styles.commandsContainer}>\r\n                    {showUserUpload && <UploadFile className={styles.commandButton} disabled={loggedIn} />}\r\n                    <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                </div>\r\n                <h1 className={styles.askTitle}>{t(\"askTitle\")}</h1>\r\n\r\n                <div className={styles.askQuestionInput}>\r\n                    <QuestionInput\r\n                        placeholder={t(\"gpt4vExamples.placeholder\")}\r\n                        disabled={isLoading}\r\n                        initQuestion={question}\r\n                        onSend={question => makeApiRequest(question)}\r\n                        showSpeechInput={showSpeechInput}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={styles.askBottomSection}>\r\n                {isLoading && <Spinner label={t(\"generatingAnswer\")} />}\r\n                {!lastQuestionRef.current && (\r\n                    <div className={styles.askTopSection}>\r\n                        {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\r\n                        <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\r\n                    </div>\r\n                )}\r\n                {!isLoading && answer && !error && (\r\n                    <div className={styles.askAnswerContainer}>\r\n                        <Answer\r\n                            answer={answer}\r\n                            index={0}\r\n                            speechConfig={speechConfig}\r\n                            isStreaming={false}\r\n                            onCitationClicked={x => onShowCitation(x)}\r\n                            onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab)}\r\n                            onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab)}\r\n                            showSpeechOutputAzure={showSpeechOutputAzure}\r\n                            showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                        />\r\n                    </div>\r\n                )}\r\n                {error ? (\r\n                    <div className={styles.askAnswerContainer}>\r\n                        <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                    </div>\r\n                ) : null}\r\n                {activeAnalysisPanelTab && answer && (\r\n                    <AnalysisPanel\r\n                        className={styles.askAnalysisPanel}\r\n                        activeCitation={activeCitation}\r\n                        onActiveTabChanged={x => onToggleTab(x)}\r\n                        citationHeight=\"600px\"\r\n                        answer={answer}\r\n                        activeTab={activeAnalysisPanelTab}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <Panel\r\n                headerText={t(\"labels.headerText\")}\r\n                isOpen={isConfigPanelOpen}\r\n                isBlocking={false}\r\n                onDismiss={() => setIsConfigPanelOpen(false)}\r\n                closeButtonAriaLabel={t(\"labels.closeButton\")}\r\n                onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\r\n                isFooterAtBottom={true}\r\n            >\r\n                <TextField\r\n                    id={promptTemplateFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    defaultValue={promptTemplate}\r\n                    label={t(\"labels.promptTemplate\")}\r\n                    multiline\r\n                    autoAdjustHeight\r\n                    onChange={onPromptTemplateChange}\r\n                    aria-labelledby={promptTemplateId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={promptTemplateId} fieldId={promptTemplateFieldId} helpText={t(\"helpTexts.promptTemplate\")} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={temperatureFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label={t(\"labels.temperature\")}\r\n                    type=\"number\"\r\n                    min={0}\r\n                    max={1}\r\n                    step={0.1}\r\n                    defaultValue={temperature.toString()}\r\n                    onChange={onTemperatureChange}\r\n                    aria-labelledby={temperatureId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={temperatureId} fieldId={temperatureFieldId} helpText={t(\"helpTexts.temperature\")} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={seedFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label={t(\"labels.seed\")}\r\n                    type=\"text\"\r\n                    defaultValue={seed?.toString() || \"\"}\r\n                    onChange={onSeedChange}\r\n                    aria-labelledby={seedId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={seedId} fieldId={seedFieldId} helpText={t(\"helpTexts.seed\")} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={searchScoreFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label={t(\"labels.minimumSearchScore\")}\r\n                    type=\"number\"\r\n                    min={0}\r\n                    step={0.01}\r\n                    defaultValue={minimumSearchScore.toString()}\r\n                    onChange={onMinimumSearchScoreChange}\r\n                    aria-labelledby={searchScoreId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={searchScoreId} fieldId={searchScoreFieldId} helpText={t(\"helpTexts.searchScore\")} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                {showSemanticRankerOption && (\r\n                    <TextField\r\n                        id={rerankerScoreFieldId}\r\n                        className={styles.chatSettingsSeparator}\r\n                        label={t(\"labels.minimumRerankerScore\")}\r\n                        type=\"number\"\r\n                        min={1}\r\n                        max={4}\r\n                        step={0.1}\r\n                        defaultValue={minimumRerankerScore.toString()}\r\n                        onChange={onMinimumRerankerScoreChange}\r\n                        aria-labelledby={rerankerScoreId}\r\n                        onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                            <HelpCallout\r\n                                labelId={rerankerScoreId}\r\n                                fieldId={rerankerScoreFieldId}\r\n                                helpText={t(\"helpTexts.rerankerScore\")}\r\n                                label={props?.label}\r\n                            />\r\n                        )}\r\n                    />\r\n                )}\r\n\r\n                <TextField\r\n                    id={retrieveCountFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label={t(\"labels.retrieveCount\")}\r\n                    type=\"number\"\r\n                    min={1}\r\n                    max={50}\r\n                    defaultValue={retrieveCount.toString()}\r\n                    onChange={onRetrieveCountChange}\r\n                    aria-labelledby={retrieveCountId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout labelId={retrieveCountId} fieldId={retrieveCountFieldId} helpText={t(\"helpTexts.retrieveNumber\")} label={props?.label} />\r\n                    )}\r\n                />\r\n\r\n                <TextField\r\n                    id={excludeCategoryFieldId}\r\n                    className={styles.chatSettingsSeparator}\r\n                    label={t(\"labels.excludeCategory\")}\r\n                    defaultValue={excludeCategory}\r\n                    onChange={onExcludeCategoryChanged}\r\n                    aria-labelledby={excludeCategoryId}\r\n                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                        <HelpCallout\r\n                            labelId={excludeCategoryId}\r\n                            fieldId={excludeCategoryFieldId}\r\n                            helpText={t(\"helpTexts.excludeCategory\")}\r\n                            label={props?.label}\r\n                        />\r\n                    )}\r\n                />\r\n\r\n                {showSemanticRankerOption && (\r\n                    <>\r\n                        <Checkbox\r\n                            id={semanticRankerFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useSemanticRanker}\r\n                            label={t(\"labels.useSemanticRanker\")}\r\n                            onChange={onUseSemanticRankerChange}\r\n                            aria-labelledby={semanticRankerId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={semanticRankerId}\r\n                                    fieldId={semanticRankerFieldId}\r\n                                    helpText={t(\"helpTexts.useSemanticReranker\")}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n\r\n                        <Checkbox\r\n                            id={semanticCaptionsFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useSemanticCaptions}\r\n                            label={t(\"labels.useSemanticCaptions\")}\r\n                            onChange={onUseSemanticCaptionsChange}\r\n                            disabled={!useSemanticRanker}\r\n                            aria-labelledby={semanticCaptionsId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={semanticCaptionsId}\r\n                                    fieldId={semanticCaptionsFieldId}\r\n                                    helpText={t(\"helpTexts.useSemanticCaptions\")}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </>\r\n                )}\r\n\r\n                {showGPT4VOptions && (\r\n                    <GPT4VSettings\r\n                        gpt4vInputs={gpt4vInput}\r\n                        isUseGPT4V={useGPT4V}\r\n                        updateUseGPT4V={useGPT4V => {\r\n                            setUseGPT4V(useGPT4V);\r\n                        }}\r\n                        updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\r\n                    />\r\n                )}\r\n\r\n                {showVectorOption && (\r\n                    <VectorSettings\r\n                        defaultRetrievalMode={retrievalMode}\r\n                        showImageOptions={useGPT4V && showGPT4VOptions}\r\n                        updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\r\n                        updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\r\n                    />\r\n                )}\r\n\r\n                {useLogin && (\r\n                    <>\r\n                        <Checkbox\r\n                            id={useOidSecurityFilterFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useOidSecurityFilter || requireAccessControl}\r\n                            label={t(\"labels.useOidSecurityFilter\")}\r\n                            disabled={!loggedIn || requireAccessControl}\r\n                            onChange={onUseOidSecurityFilterChange}\r\n                            aria-labelledby={useOidSecurityFilterId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={useOidSecurityFilterId}\r\n                                    fieldId={useOidSecurityFilterFieldId}\r\n                                    helpText={t(\"helpTexts.useOidSecurityFilter\")}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n                        <Checkbox\r\n                            id={useGroupsSecurityFilterFieldId}\r\n                            className={styles.chatSettingsSeparator}\r\n                            checked={useGroupsSecurityFilter || requireAccessControl}\r\n                            label={t(\"labels.useGroupsSecurityFilter\")}\r\n                            disabled={!loggedIn || requireAccessControl}\r\n                            onChange={onUseGroupsSecurityFilterChange}\r\n                            aria-labelledby={useGroupsSecurityFilterId}\r\n                            onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                <HelpCallout\r\n                                    labelId={useGroupsSecurityFilterId}\r\n                                    fieldId={useGroupsSecurityFilterFieldId}\r\n                                    helpText={t(\"helpTexts.useGroupsSecurityFilter\")}\r\n                                    label={props?.label}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </>\r\n                )}\r\n                {useLogin && <TokenClaimsDisplay />}\r\n            </Panel>\r\n        </div>\r\n    );\r\n}\r\n\r\nComponent.displayName = \"Ask\";\r\n"],"names":["Component","isConfigPanelOpen","setIsConfigPanelOpen","useState","promptTemplate","setPromptTemplate","promptTemplatePrefix","setPromptTemplatePrefix","promptTemplateSuffix","setPromptTemplateSuffix","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrievalMode","setRetrievalMode","RetrievalMode","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","useSemanticCaptions","setUseSemanticCaptions","useGPT4V","setUseGPT4V","gpt4vInput","setGPT4VInput","GPT4VInput","excludeCategory","setExcludeCategory","question","setQuestion","vectorFieldList","setVectorFieldList","VectorFieldOptions","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","showSpeechInput","setShowSpeechInput","showSpeechOutputBrowser","setShowSpeechOutputBrowser","showSpeechOutputAzure","setShowSpeechOutputAzure","audio","useRef","isPlaying","setIsPlaying","lastQuestionRef","isLoading","setIsLoading","error","setError","answer","setAnswer","speechUrls","setSpeechUrls","speechConfig","activeCitation","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","client","useLogin","useMsal","loggedIn","useContext","LoginContext","getConfig","configApi","config","useEffect","makeApiRequest","token","getToken","request","i18n","result","askApi","e","onPromptTemplateChange","_ev","newValue","onTemperatureChange","onSeedChange","onMinimumSearchScoreChange","onMinimumRerankerScoreChange","onRetrieveCountChange","onUseSemanticRankerChange","checked","onUseSemanticCaptionsChange","onExcludeCategoryChanged","onExampleClicked","example","onShowCitation","citation","AnalysisPanelTabs","onToggleTab","tab","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","promptTemplateId","useId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","t","useTranslation","jsxs","styles","jsx","Helmet","UploadFile","SettingsButton","QuestionInput","Spinner","LanguagePicker","newLang","ExampleList","Answer","x","AnswerError","AnalysisPanel","Panel","DefaultButton","TextField","props","HelpCallout","Fragment","Checkbox","GPT4VSettings","inputs","VectorSettings","options","requireAccessControl","TokenClaimsDisplay"],"mappings":"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"}