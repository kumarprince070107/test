{"version":3,"mappings":"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","names":["FileUpload","handleUploadFile","onfiledrop","useCallback","acceptedFiles","getRootProps","getInputProps","isDragActive","useDropzone","styles","jsx","appServicesAuthTokenUrl","appServicesAuthTokenRefreshUrl","appServicesAuthLogoutUrl","fetchAuthSetup","response","authSetup","useLogin","requireAccessControl","enableUnauthenticatedAccess","requireLogin","msalConfig","loginRequest","tokenRequest","getRedirectUri","getAppServicesToken","checkNotExpired","appServicesToken","currentDate","getAppServicesTokenFromMe","r","json","acc","item","token","isUsingAppServicesLogin","appServicesLogout","checkLoggedIn","client","getToken","error","getUsername","activeAccount","getTokenClaims","BACKEND_URI","getHeaders","idToken","configApi","askApi","request","headers","parsedResponse","chatApi","shouldStream","url","getSpeechApi","text","blob","getCitationFilePath","citation","uploadFileApi","errorMessage","deleteUploadedFileApi","filename","listUploadedFilesApi","RetrievalMode","GPT4VInput","VectorFieldOptions","LoginContext","createContext","_","HISTORY_COUNT_PER_LOAD","LeftSidebar","provider","isOpen","notify","onClose","onChatSelected","historyManager","conversationOptions","setConversationOptions","useState","loggedIn","useContext","isSidebarEnabled","setIsSidebarEnabled","isFileCollectionOpen","setFileCollectionOpen","isQuickUploadOpen","setQuickUploadOpen","isFeedbackOpen","setFeedbackOpen","uploadedFile","setUploadedFile","isUploading","setIsUploading","uploadedFiles","setUploadedFiles","useMsal","isLoading","setIsLoading","deletionStatus","setDeletionStatus","history","setHistory","hasMoreHistory","setHasMoreHistory","searchQuery","setSearchQuery","groupedHistory","useMemo","groupHistory","today","yesterday","lastWeek","lastMonth","groups","itemDate","group","handleSelect","id","useEffect","le","file","formData","getfiles","listUploadedFiles","files","handleRemoveFile","searchTerm","setSearchTerm","filteredConversations","conversation","handleDeleteConversation","conversationId","prevOptions","option","loadMoreHistory","items","prevHistory","useTranslation","jsxs","Fragment","Dropdown","e","Delete24Regular","FontAwesomeIcon","faAngleDoubleUp","faAngleDoubleDown","index","TextField","parseAnswerToHtml","answer","isStreaming","onCitationClicked","citations","parsedAnswer","lastIndex","i","part","citationIndex","path","renderToStaticMarkup","AnswerIcon","Sparkle28Filled","supportedLngs","i18next","HttpApi","LanguageDetector","initReactI18next","enTranslation","esTranslation","frTranslation","jaTranslation","SpeechSynthesis","synth","getUtterance","lngCode","utterance","voice","SpeechOutputBrowser","i18n","currentLng","isPlaying","setIsPlaying","startOrStopSpeech","color","IconButton","SpeechOutputAzure","speechConfig","localPlayingState","setLocalPlayingState","t","playAudio","speechUrl","Answer","isSelected","onMindmapClicked","onThoughtProcessClicked","onSupportingContentClicked","onFollowupQuestionClicked","showFollowupQuestions","showSpeechOutputAzure","showSpeechOutputBrowser","followupQuestions","messageContent","sanitizedAnswerHtml","DOMPurify","Stack","ReactMarkdown","rehypeRaw","remarkGfm","x","AnswerLoading","animatedStyles","useSpring","animated","AnswerError","onRetry","ErrorCircle24Regular","PrimaryButton","useCustomSpeechRecognition","SpeechRecognition","speechRecognition","SpeechInput","updateQuestion","isRecording","setIsRecording","startRecording","event","input","result","stopRecording","Tooltip","Button","Mic28Filled","QuestionInput","onSend","disabled","placeholder","clearOnSend","initQuestion","showSpeechInput","question","setQuestion","isComposing","setIsComposing","sendQuestion","onEnterPress","ev","handleCompositionStart","handleCompositionEnd","onQuestionChange","_ev","newValue","disableRequiredAccessControl","sendQuestionDisabled","Send28Filled","Example","value","onClick","ExampleList","onExampleClicked","useGPT4V","DEFAULT_EXAMPLES","GPT4V_EXAMPLES","UserChatMessage","message","stackTokens","labelCalloutStackStyles","iconButtonStyles","iconProps","HelpCallout","props","isCalloutVisible","toggleIsCalloutVisible","useBoolean","descriptionId","useId","iconButtonId","Callout","DefaultButton","parseSupportingContentItem","parts","title","content","SupportingContent","supportingContent","textItems","imageItems","c","ind","parsed","img","AnalysisPanelTabs","SyntaxHighlighter","ThoughtProcess","thoughts","k","a11yLight","MarkdownViewer","src","setContent","setError","removeAnchorLinks","markdown","ancorLinksRegex","markdownText","Spinner","SpinnerSize","MessageBar","MessageBarType","Link","pivotItemDisabledStyle","AnalysisPanel","activeTab","activeCitation","citationHeight","className","onActiveTabChanged","isDisabledThoughtProcessTab","isDisabledSupportingContentTab","isDisabledCitationTab","setCitation","wordUrl","setWordUrl","fetchCitation","originalHash","citationContent","citationObjectUrl","renderFileViewer","Pivot","pivotItem","PivotItem","HistoryItem","onSelect","onDelete","isModalOpen","setIsModalOpen","handleDelete","DeleteHistoryModal","onConfirm","HistoryProviderOptions","NoneProvider","count","answers","IndexedDBProvider","dbName","storeName","openDB","db","cursor","loadedItems","timestamp","tx","current","useHistoryManager","HistoryPanel","Panel","PanelType","InfiniteLoadingButton","func","buttonRef","useRef","observer","entries","entry","SettingsButton","Settings24Regular","ClearChatButton","UploadFile","setIsCalloutVisible","uploadedFileError","setUploadedFileError","handleButtonClick","Add24Regular","Label","Text","VectorSettings","updateRetrievalMode","updateVectorFields","showImageOptions","defaultRetrievalMode","retrievalMode","setRetrievalMode","vectorFieldOption","setVectorFieldOption","onRetrievalModeChange","onVectorFieldsChange","retrievalModeId","retrievalModeFieldId","vectorFieldsId","vectorFieldsFieldId","TokenClaimsDisplay","instance","claims","setClaims","ToString","a","o","key","originalKey","columns","createTableColumn","b","DataGrid","DataGridHeader","DataGridRow","renderHeaderCell","DataGridHeaderCell","DataGridBody","rowId","renderCell","DataGridCell","GPT4VSettings","updateGPT4VInputs","updateUseGPT4V","isUseGPT4V","gpt4vInputs","setUseGPT4V","onuseGPT4V","checked","onSetGPT4VInput","data","useGPT4VId","useGPT4VFieldId","gpt4VInputId","gpt4VInputFieldId","Checkbox","LanguagePicker","onLanguageChange","handleLanguageChange","languagePickerId","LocalLanguage24Regular","code","details","darkTheme","createTheme","Chat","isSidebarVisible","setIsSidebarVisible","isConfigPanelOpen","setIsConfigPanelOpen","isHistoryPanelOpen","setIsHistoryPanelOpen","promptTemplate","setPromptTemplate","temperature","setTemperature","seed","setSeed","minimumRerankerScore","setMinimumRerankerScore","minimumSearchScore","setMinimumSearchScore","retrieveCount","setRetrieveCount","useSemanticRanker","setUseSemanticRanker","setShouldStream","useSemanticCaptions","setUseSemanticCaptions","excludeCategory","setExcludeCategory","useSuggestFollowupQuestions","setUseSuggestFollowupQuestions","vectorFieldList","setVectorFieldList","useOidSecurityFilter","setUseOidSecurityFilter","useGroupsSecurityFilter","setUseGroupsSecurityFilter","gpt4vInput","setGPT4VInput","lastQuestionRef","chatMessageStreamEnd","setIsStreaming","setActiveCitation","activeAnalysisPanelTab","setActiveAnalysisPanelTab","selectedAnswer","setSelectedAnswer","setAnswers","streamedAnswers","setStreamedAnswers","speechUrls","setSpeechUrls","showGPT4VOptions","setShowGPT4VOptions","showSemanticRankerOption","setShowSemanticRankerOption","showVectorOption","setShowVectorOption","showUserUpload","setShowUserUpload","showLanguagePicker","setshowLanguagePicker","setShowSpeechInput","setShowSpeechOutputBrowser","setShowSpeechOutputAzure","showChatHistoryBrowser","setShowChatHistoryBrowser","audio","getConfig","config","handleAsyncRequest","responseBody","askResponse","updateState","newContent","resolve","latestResponse","readNDJSONStream","historyProvider","makeApiRequest","clearChat","onPromptTemplateChange","onTemperatureChange","onSeedChange","onMinimumSearchScoreChange","onMinimumRerankerScoreChange","onRetrieveCountChange","onUseSemanticRankerChange","onUseSemanticCaptionsChange","onShouldStreamChange","onExcludeCategoryChanged","onUseSuggestFollowupQuestionsChange","onUseOidSecurityFilterChange","onUseGroupsSecurityFilterChange","example","onShowCitation","onToggleTab","tab","promptTemplateId","promptTemplateFieldId","temperatureId","temperatureFieldId","seedId","seedFieldId","searchScoreId","searchScoreFieldId","rerankerScoreId","rerankerScoreFieldId","retrieveCountId","retrieveCountFieldId","excludeCategoryId","excludeCategoryFieldId","semanticRankerId","semanticRankerFieldId","semanticCaptionsId","semanticCaptionsFieldId","suggestFollowupQuestionsId","suggestFollowupQuestionsFieldId","useOidSecurityFilterId","useOidSecurityFilterFieldId","useGroupsSecurityFilterId","useGroupsSecurityFilterFieldId","shouldStreamId","shouldStreamFieldId","ThemeProvider","faAngleDoubleRight","faAngleDoubleLeft","streamedAnswer","q","SparkleFilled","newLang","inputs","options","Files","setGroups","setActiveTab","handleFileUpload","newFiles","prev","createGroup","fileIndex","Help","activeSection","setActiveSection","logo","istLogo","LoginButton","setLoggedIn","username","setUsername","handleLoginPopup","handleLogoutPopup","Layout","menuOpen","setMenuOpen","menuRef","toggleMenu","handleClickOutside","NavLink","isActive","Outlet","LayoutWrapper","msalInstance","PublicClientApplication","EventType","account","MsalProvider","initializeIcons","router","createHashRouter","__vitePreload","ReactDOM","React","I18nextProvider","HelmetProvider","RouterProvider"],"ignoreList":[],"sources":["../../../frontend/src/components/FileUpload/FileUpload.tsx","../../../frontend/src/authConfig.ts","../../../frontend/src/api/api.ts","../../../frontend/src/api/models.ts","../../../frontend/src/loginContext.tsx","../../../frontend/src/pages/leftsidebar/LeftSidebar.tsx","../../../frontend/src/components/Answer/AnswerParser.tsx","../../../frontend/src/components/Answer/AnswerIcon.tsx","../../../frontend/src/i18n/config.ts","../../../frontend/src/components/Answer/SpeechOutputBrowser.tsx","../../../frontend/src/components/Answer/SpeechOutputAzure.tsx","../../../frontend/src/components/Answer/Answer.tsx","../../../frontend/src/components/Answer/AnswerLoading.tsx","../../../frontend/src/components/Answer/AnswerError.tsx","../../../frontend/src/components/QuestionInput/SpeechInput.tsx","../../../frontend/src/components/QuestionInput/QuestionInput.tsx","../../../frontend/src/components/Example/Example.tsx","../../../frontend/src/components/Example/ExampleList.tsx","../../../frontend/src/components/UserChatMessage/UserChatMessage.tsx","../../../frontend/src/components/HelpCallout/HelpCallout.tsx","../../../frontend/src/components/SupportingContent/SupportingContentParser.ts","../../../frontend/src/components/SupportingContent/SupportingContent.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanelTabs.tsx","../../../frontend/src/components/AnalysisPanel/ThoughtProcess.tsx","../../../frontend/src/components/MarkdownViewer/MarkdownViewer.tsx","../../../frontend/src/components/AnalysisPanel/AnalysisPanel.tsx","../../../frontend/src/components/HistoryItem/HistoryItem.tsx","../../../frontend/src/components/HistoryProviders/IProvider.ts","../../../frontend/src/components/HistoryProviders/None.ts","../../../frontend/src/components/HistoryProviders/IndexedDB.ts","../../../frontend/src/components/HistoryProviders/HistoryManager.ts","../../../frontend/src/components/HistoryPanel/HistoryPanel.tsx","../../../frontend/src/components/SettingsButton/SettingsButton.tsx","../../../frontend/src/components/ClearChatButton/ClearChatButton.tsx","../../../frontend/src/components/UploadFile/UploadFile.tsx","../../../frontend/src/components/VectorSettings/VectorSettings.tsx","../../../frontend/src/components/TokenClaimsDisplay/TokenClaimsDisplay.tsx","../../../frontend/src/components/GPT4VSettings/GPT4VSettings.tsx","../../../frontend/src/i18n/LanguagePicker.tsx","../../../frontend/src/pages/chat/Chat.tsx","../../../frontend/src/pages/files/files.tsx","../../../frontend/src/pages/Help/help.tsx","../../../frontend/src/assets/braein.png","../../../frontend/src/assets/ist_logo_footer.svg","../../../frontend/src/components/LoginButton/LoginButton.tsx","../../../frontend/src/pages/layout/Layout.tsx","../../../frontend/src/layoutWrapper.tsx","../../../frontend/src/index.tsx"],"sourcesContent":["import React, { useCallback, useEffect } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport styles from \"./FileUpload.module.css\";\r\n\r\nconst FileUpload = ({ handleUploadFile }) => {\r\n    const onfiledrop = useCallback((acceptedFiles) => {\r\n        handleUploadFile(acceptedFiles[0])\r\n    }, []);\r\n    const { acceptedFiles, getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop: onfiledrop });\r\n\r\n    return (\r\n        <div {...getRootProps()} className={styles.dropzone}>\r\n            <input {...getInputProps()} />\r\n            {isDragActive ? (\r\n                <p>Drop the files here ...</p>\r\n            ) : (\r\n                <p>Drag 'n' drop some files here, or click to select files</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FileUpload;\r\n\r\n\r\n\r\n\r\n// import React, { useCallback } from \"react\";\r\n// import { useDropzone } from \"react-dropzone\";\r\n// import styles from \"./FileUpload.module.css\";\r\n// const FileUpload = () => {\r\n//     const onDrop = useCallback((acceptedFiles: File[]) => {\r\n//         // Handle file upload here\r\n//         console.log(acceptedFiles);\r\n//     }, []);\r\n\r\n//     const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n//     return (\r\n//         <div {...getRootProps()} className={styles.dropzone}>\r\n//             <input {...getInputProps()} />\r\n//             {isDragActive ? <p>Drop the files here ...</p> : <p>Drag 'n' drop some files here, or click to select files</p>}\r\n//         </div>\r\n//     );\r\n// };\r\n\r\n// export default FileUpload;\r\n\r\n\r\n","// Refactored from https://github.com/Azure-Samples/ms-identity-javascript-react-tutorial/blob/main/1-Authentication/1-sign-in/SPA/src/authConfig.js\r\n\r\nimport { IPublicClientApplication } from \"@azure/msal-browser\";\r\n\r\nconst appServicesAuthTokenUrl = \".auth/me\";\r\nconst appServicesAuthTokenRefreshUrl = \".auth/refresh\";\r\nconst appServicesAuthLogoutUrl = \".auth/logout?post_logout_redirect_uri=/\";\r\n\r\ninterface AppServicesToken {\r\n    id_token: string;\r\n    access_token: string;\r\n    user_claims: Record<string, any>;\r\n    expires_on: string;\r\n}\r\n\r\ninterface AuthSetup {\r\n    // Set to true if login elements should be shown in the UI\r\n    useLogin: boolean;\r\n    // Set to true if access control is enforced by the application\r\n    requireAccessControl: boolean;\r\n    // Set to true if the application allows unauthenticated access (only applies for documents without access control)\r\n    enableUnauthenticatedAccess: boolean;\r\n    /**\r\n     * Configuration object to be passed to MSAL instance on creation.\r\n     * For a full list of MSAL.js configuration parameters, visit:\r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n     */\r\n    msalConfig: {\r\n        auth: {\r\n            clientId: string; // Client app id used for login\r\n            authority: string; // Directory to use for login https://learn.microsoft.com/entra/identity-platform/msal-client-application-configuration#authority\r\n            redirectUri: string; // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\r\n            postLogoutRedirectUri: string; // Indicates the page to navigate after logout.\r\n            navigateToLoginRequestUrl: boolean; // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n        };\r\n        cache: {\r\n            cacheLocation: string; // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n            storeAuthStateInCookie: boolean; // Set this to \"true\" if you are having issues on IE11 or Edge\r\n        };\r\n    };\r\n    loginRequest: {\r\n        /**\r\n         * Scopes you add here will be prompted for user consent during sign-in.\r\n         * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n         * For more information about OIDC scopes, visit:\r\n         * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n         */\r\n        scopes: Array<string>;\r\n    };\r\n    tokenRequest: {\r\n        scopes: Array<string>;\r\n    };\r\n}\r\n\r\n// Fetch the auth setup JSON data from the API if not already cached\r\nasync function fetchAuthSetup(): Promise<AuthSetup> {\r\n    const response = await fetch(\"/auth_setup\");\r\n    if (!response.ok) {\r\n        throw new Error(`auth setup response was not ok: ${response.status}`);\r\n    }\r\n    return await response.json();\r\n}\r\n\r\nconst authSetup = await fetchAuthSetup();\r\n\r\nexport const useLogin = authSetup.useLogin;\r\n\r\nexport const requireAccessControl = authSetup.requireAccessControl;\r\n\r\nexport const enableUnauthenticatedAccess = authSetup.enableUnauthenticatedAccess;\r\n\r\nexport const requireLogin = requireAccessControl && !enableUnauthenticatedAccess;\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation.\r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\r\n */\r\nexport const msalConfig = authSetup.msalConfig;\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit:\r\n * https://learn.microsoft.com/entra/identity-platform/permissions-consent-overview#openid-connect-scopes\r\n */\r\nexport const loginRequest = authSetup.loginRequest;\r\n\r\nconst tokenRequest = authSetup.tokenRequest;\r\n\r\n// Build an absolute redirect URI using the current window's location and the relative redirect URI from auth setup\r\nexport const getRedirectUri = () => {\r\n    return window.location.origin + authSetup.msalConfig.auth.redirectUri;\r\n};\r\n\r\n// Cache the app services token if it's available\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#global_context\r\ndeclare global {\r\n    var cachedAppServicesToken: AppServicesToken | null;\r\n}\r\nglobalThis.cachedAppServicesToken = null;\r\n\r\n/**\r\n * Retrieves an access token if the user is logged in using app services authentication.\r\n * Checks if the current token is expired and fetches a new token if necessary.\r\n * Returns null if the app doesn't support app services authentication.\r\n *\r\n * @returns {Promise<AppServicesToken | null>} A promise that resolves to an AppServicesToken if the user is authenticated, or null if authentication is not supported or fails.\r\n */\r\nconst getAppServicesToken = (): Promise<AppServicesToken | null> => {\r\n    const checkNotExpired = (appServicesToken: AppServicesToken) => {\r\n        const currentDate = new Date();\r\n        const expiresOnDate = new Date(appServicesToken.expires_on);\r\n        return expiresOnDate > currentDate;\r\n    };\r\n\r\n    if (globalThis.cachedAppServicesToken && checkNotExpired(globalThis.cachedAppServicesToken)) {\r\n        return Promise.resolve(globalThis.cachedAppServicesToken);\r\n    }\r\n\r\n    const getAppServicesTokenFromMe: () => Promise<AppServicesToken | null> = () => {\r\n        return fetch(appServicesAuthTokenUrl).then(r => {\r\n            if (r.ok) {\r\n                return r.json().then(json => {\r\n                    if (json.length > 0) {\r\n                        return {\r\n                            id_token: json[0][\"id_token\"] as string,\r\n                            access_token: json[0][\"access_token\"] as string,\r\n                            user_claims: json[0][\"user_claims\"].reduce((acc: Record<string, any>, item: Record<string, any>) => {\r\n                                acc[item.typ] = item.val;\r\n                                return acc;\r\n                            }, {}) as Record<string, any>,\r\n                            expires_on: json[0][\"expires_on\"] as string\r\n                        } as AppServicesToken;\r\n                    }\r\n\r\n                    return null;\r\n                });\r\n            }\r\n\r\n            return null;\r\n        });\r\n    };\r\n\r\n    return getAppServicesTokenFromMe().then(token => {\r\n        if (token) {\r\n            if (checkNotExpired(token)) {\r\n                globalThis.cachedAppServicesToken = token;\r\n                return token;\r\n            }\r\n\r\n            return fetch(appServicesAuthTokenRefreshUrl).then(r => {\r\n                if (r.ok) {\r\n                    return getAppServicesTokenFromMe();\r\n                }\r\n                return null;\r\n            });\r\n        }\r\n\r\n        return null;\r\n    });\r\n};\r\n\r\nexport const isUsingAppServicesLogin = (await getAppServicesToken()) != null;\r\n\r\n// Sign out of app services\r\n// Learn more at https://learn.microsoft.com/azure/app-service/configure-authentication-customize-sign-in-out#sign-out-of-a-session\r\nexport const appServicesLogout = () => {\r\n    window.location.href = appServicesAuthLogoutUrl;\r\n};\r\n\r\n/**\r\n * Determines if the user is logged in either via the MSAL public client application or the app services login.\r\n * @param {IPublicClientApplication | undefined} client - The MSAL public client application instance, or undefined if not available.\r\n * @returns {Promise<boolean>} A promise that resolves to true if the user is logged in, false otherwise.\r\n */\r\nexport const checkLoggedIn = async (client: IPublicClientApplication | undefined): Promise<boolean> => {\r\n    if (client) {\r\n        const activeAccount = client.getActiveAccount();\r\n        if (activeAccount) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\n// Get an access token for use with the API server.\r\n// ID token received when logging in may not be used for this purpose because it has the incorrect audience\r\n// Use the access token from app services login if available\r\nexport const getToken = async (client: IPublicClientApplication): Promise<string | undefined> => {\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return Promise.resolve(appServicesToken.access_token);\r\n    }\r\n\r\n    return client\r\n        .acquireTokenSilent({\r\n            ...tokenRequest,\r\n            redirectUri: getRedirectUri()\r\n        })\r\n        .then(r => r.accessToken)\r\n        .catch(error => {\r\n            console.log(error);\r\n            return undefined;\r\n        });\r\n};\r\n\r\n/**\r\n * Retrieves the username of the active account.\r\n * If no active account is found, attempts to retrieve the username from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<string | null>} The username of the active account, or null if no username is found.\r\n */\r\nexport const getUsername = async (client: IPublicClientApplication): Promise<string | null> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        return activeAccount.username;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken?.user_claims) {\r\n        return appServicesToken.user_claims.preferred_username;\r\n    }\r\n\r\n    return null;\r\n};\r\n\r\n/**\r\n * Retrieves the token claims of the active account.\r\n * If no active account is found, attempts to retrieve the token claims from the app services login token if available.\r\n * @param {IPublicClientApplication} client - The MSAL public client application instance.\r\n * @returns {Promise<Record<string, unknown> | undefined>} A promise that resolves to the token claims of the active account, the user claims from the app services login token, or undefined if no claims are found.\r\n */\r\nexport const getTokenClaims = async (client: IPublicClientApplication): Promise<Record<string, unknown> | undefined> => {\r\n    const activeAccount = client.getActiveAccount();\r\n    if (activeAccount) {\r\n        return activeAccount.idTokenClaims;\r\n    }\r\n\r\n    const appServicesToken = await getAppServicesToken();\r\n    if (appServicesToken) {\r\n        return appServicesToken.user_claims;\r\n    }\r\n\r\n    return undefined;\r\n};\r\n","const BACKEND_URI = \"\";\r\n\r\nimport { ChatAppResponse, ChatAppResponseOrError, ChatAppRequest, Config, SimpleAPIResponse } from \"./models\";\r\nimport { useLogin, getToken, isUsingAppServicesLogin } from \"../authConfig\";\r\n\r\nexport async function getHeaders(idToken: string | undefined): Promise<Record<string, string>> {\r\n    // If using login and not using app services, add the id token of the logged in account as the authorization\r\n    if (useLogin && !isUsingAppServicesLogin) {\r\n        if (idToken) {\r\n            return { Authorization: `Bearer ${idToken}` };\r\n        }\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nexport async function configApi(): Promise<Config> {\r\n    const response = await fetch(`${BACKEND_URI}/config`, {\r\n        method: \"GET\"\r\n    });\r\n\r\n    return (await response.json()) as Config;\r\n}\r\n\r\nexport async function askApi(request: ChatAppRequest, idToken: string | undefined): Promise<ChatAppResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(`${BACKEND_URI}/ask`, {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(request)\r\n    });\r\n\r\n    if (response.status > 299 || !response.ok) {\r\n        throw Error(`Request failed with status ${response.status}`);\r\n    }\r\n    const parsedResponse: ChatAppResponseOrError = await response.json();\r\n    if (parsedResponse.error) {\r\n        throw Error(parsedResponse.error);\r\n    }\r\n\r\n    return parsedResponse as ChatAppResponse;\r\n}\r\n\r\nexport async function chatApi(request: ChatAppRequest, shouldStream: boolean, idToken: string | undefined): Promise<Response> {\r\n    let url = `${BACKEND_URI}/chat`;\r\n    if (shouldStream) {\r\n        url += \"/stream\";\r\n    }\r\n    const headers = await getHeaders(idToken);\r\n    return await fetch(url, {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(request)\r\n    });\r\n}\r\n\r\nexport async function getSpeechApi(text: string): Promise<string | null> {\r\n    return await fetch(\"/speech\", {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify({\r\n            text: text\r\n        })\r\n    })\r\n        .then(response => {\r\n            if (response.status == 200) {\r\n                return response.blob();\r\n            } else if (response.status == 400) {\r\n                console.log(\"Speech synthesis is not enabled.\");\r\n                return null;\r\n            } else {\r\n                console.error(\"Unable to get speech synthesis.\");\r\n                return null;\r\n            }\r\n        })\r\n        .then(blob => (blob ? URL.createObjectURL(blob) : null));\r\n}\r\n\r\nexport function getCitationFilePath(citation: string): string {\r\n    return `${BACKEND_URI}/content/${citation}`;\r\n}\r\n\r\nexport async function uploadFileApi(request: FormData, idToken: string): Promise<SimpleAPIResponse> {\r\n    const response = await fetch(\"/upload\", {\r\n        method: \"POST\",\r\n        headers: await getHeaders(idToken),\r\n        body: request\r\n    });\r\n\r\n    if (!response.ok) {\r\n        // newchange 2l\r\n        const errorMessage = await response.text(); // Fetch additional error details\r\n        console.error(`Error uploading file: ${response.status} - ${response.statusText}, Details: ${errorMessage}`);\r\n        throw new Error(`Uploading files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function deleteUploadedFileApi(filename: string, idToken: string): Promise<SimpleAPIResponse> {\r\n    const headers = await getHeaders(idToken);\r\n    const response = await fetch(\"/delete_uploaded\", {\r\n        method: \"POST\",\r\n        headers: { ...headers, \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ filename })\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Deleting file failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: SimpleAPIResponse = await response.json();\r\n    return dataResponse;\r\n}\r\n\r\nexport async function listUploadedFilesApi(idToken: string): Promise<string[]> {\r\n    const response = await fetch(`/list_uploaded`, {\r\n        method: \"GET\",\r\n        headers: await getHeaders(idToken)\r\n    });\r\n\r\n    if (!response.ok) {\r\n        throw new Error(`Listing files failed: ${response.statusText}`);\r\n    }\r\n\r\n    const dataResponse: string[] = await response.json();\r\n    return dataResponse;\r\n}\r\n","export const enum RetrievalMode {\r\n    Hybrid = \"hybrid\",\r\n    Vectors = \"vectors\",\r\n    Text = \"text\"\r\n}\r\n\r\nexport const enum GPT4VInput {\r\n    TextAndImages = \"textAndImages\",\r\n    Images = \"images\",\r\n    Texts = \"texts\"\r\n}\r\n\r\nexport const enum VectorFieldOptions {\r\n    Embedding = \"embedding\",\r\n    ImageEmbedding = \"imageEmbedding\",\r\n    Both = \"both\"\r\n}\r\n\r\nexport type ChatAppRequestOverrides = {\r\n    retrieval_mode?: RetrievalMode;\r\n    semantic_ranker?: boolean;\r\n    semantic_captions?: boolean;\r\n    exclude_category?: string;\r\n    seed?: number;\r\n    top?: number;\r\n    temperature?: number;\r\n    minimum_search_score?: number;\r\n    minimum_reranker_score?: number;\r\n    prompt_template?: string;\r\n    prompt_template_prefix?: string;\r\n    prompt_template_suffix?: string;\r\n    suggest_followup_questions?: boolean;\r\n    use_oid_security_filter?: boolean;\r\n    use_groups_security_filter?: boolean;\r\n    use_gpt4v?: boolean;\r\n    gpt4v_input?: GPT4VInput;\r\n    vector_fields: VectorFieldOptions[];\r\n    language: string;\r\n};\r\n\r\nexport type ResponseMessage = {\r\n    content: string;\r\n    role: string;\r\n};\r\n\r\nexport type Thoughts = {\r\n    title: string;\r\n    description: any; // It can be any output from the api\r\n    props?: { [key: string]: string };\r\n};\r\n\r\nexport type ResponseContext = {\r\n    data_points: string[];\r\n    followup_questions: string[] | null;\r\n    thoughts: Thoughts[];\r\n};\r\n\r\nexport type ChatAppResponseOrError = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n    error?: string;\r\n};\r\n\r\nexport type ChatAppResponse = {\r\n    message: ResponseMessage;\r\n    delta: ResponseMessage;\r\n    context: ResponseContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type ChatAppRequestContext = {\r\n    overrides?: ChatAppRequestOverrides;\r\n};\r\n\r\nexport type ChatAppRequest = {\r\n    messages: ResponseMessage[];\r\n    context?: ChatAppRequestContext;\r\n    session_state: any;\r\n};\r\n\r\nexport type Config = {\r\n    showGPT4VOptions: boolean;\r\n    showSemanticRankerOption: boolean;\r\n    showVectorOption: boolean;\r\n    showUserUpload: boolean;\r\n    showLanguagePicker: boolean;\r\n    showSpeechInput: boolean;\r\n    showSpeechOutputBrowser: boolean;\r\n    showSpeechOutputAzure: boolean;\r\n    showChatHistoryBrowser: boolean;\r\n};\r\n\r\nexport type SimpleAPIResponse = {\r\n    message?: string;\r\n};\r\n\r\nexport interface SpeechConfig {\r\n    speechUrls: (string | null)[];\r\n    setSpeechUrls: (urls: (string | null)[]) => void;\r\n    audio: HTMLAudioElement;\r\n    isPlaying: boolean;\r\n    setIsPlaying: (isPlaying: boolean) => void;\r\n}\r\n","/**\r\n * This file defines a context for managing login state in a React application.\r\n * Context provides a way to pass data through the component tree without having to pass props down manually at every level.\r\n * For more information, refer to the official React documentation:\r\n * https://react.dev/learn/passing-data-deeply-with-context\r\n */\r\n\r\nimport { createContext } from \"react\";\r\n\r\nexport const LoginContext = createContext({\r\n    loggedIn: false,\r\n    setLoggedIn: (_: boolean) => {}\r\n});\r\n","import { useRef, useState, useEffect, useContext, useMemo } from \"react\";\r\nimport { Dropdown, IDropdownOption, TextField } from \"@fluentui/react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleDoubleDown, faAngleDoubleUp } from \"@fortawesome/free-solid-svg-icons\";\r\nimport styles from \"./LeftSidebar.module.css\";\r\nimport { faAngleDoubleRight, faAngleDoubleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport FileUpload from \"../../components/FileUpload/FileUpload\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { HistoryButton } from \"../../components/HistoryButton\";\r\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesApi } from \"../../api\";\r\nimport { UploadFile } from \"../../components/UploadFile\";\r\nimport chats from \"../chat/Chat\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { Text } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Panel, PanelType } from \"@fluentui/react\";\r\nimport { HistoryData, HistoryItem } from \"../../components/HistoryItem\";\r\nimport { useHistoryManager, HistoryMetaData } from \"../../components/HistoryProviders\";\r\nconst HISTORY_COUNT_PER_LOAD = 20;\r\nconst LeftSidebar = ({ provider, isOpen, notify, onClose, onChatSelected, historyManager }) => {\r\n    const [conversationOptions, setConversationOptions] = useState<IDropdownOption[]>([]);\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    // const [selectedConversation, setSelectedConversation] = useState<string | undefined>(undefined);\r\n    const [isSidebarEnabled, setIsSidebarEnabled] = useState<boolean>(true);\r\n    // const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);\r\n    // Section toggle states\r\n    const [isFileCollectionOpen, setFileCollectionOpen] = useState<boolean>(true);\r\n    const [isGraphRAGCollectionOpen, setGraphRAGCollectionOpen] = useState<boolean>(true);\r\n    const [isQuickUploadOpen, setQuickUploadOpen] = useState<boolean>(true);\r\n    const [isFeedbackOpen, setFeedbackOpen] = useState<boolean>(true);\r\n    const [uploadedFile, setUploadedFile] = useState<SimpleAPIResponse>();\r\n\r\n    const [isUploading, setIsUploading] = useState<boolean>(false);\r\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]); // List of uploaded files\r\n    const client = useMsal().instance;\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [deletionStatus, setDeletionStatus] = useState({});\r\n    const [history, setHistory] = useState<HistoryMetaData[]>([]);\r\n    const [hasMoreHistory, setHasMoreHistory] = useState(false);\r\n\r\n    const [searchQuery, setSearchQuery] = useState<string>(\"\");\r\n\r\n    const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n\r\n    const groupedHistory = useMemo(() => groupHistory(history), [history]);\r\n    function groupHistory(history: HistoryData[]) {\r\n        const today = new Date();\r\n        today.setHours(0, 0, 0, 0);\r\n        const yesterday = new Date(today);\r\n        yesterday.setDate(yesterday.getDate() - 1);\r\n        const lastWeek = new Date(today);\r\n        lastWeek.setDate(lastWeek.getDate() - 7);\r\n        const lastMonth = new Date(today);\r\n        lastMonth.setDate(lastMonth.getDate() - 30);\r\n\r\n        return history.reduce(\r\n            (groups, item) => {\r\n                const itemDate = new Date(item.timestamp);\r\n                let group;\r\n\r\n                if (itemDate >= today) {\r\n                    group = \"history.today\";\r\n                } else if (itemDate >= yesterday) {\r\n                    group = \"history.yesterday\";\r\n                } else if (itemDate >= lastWeek) {\r\n                    group = \"history.last7days\";\r\n                } else if (itemDate >= lastMonth) {\r\n                    group = \"history.last30days\";\r\n                } else {\r\n                    group = itemDate.toLocaleDateString(undefined, { year: \"numeric\", month: \"long\" });\r\n                }\r\n\r\n                if (!groups[group]) {\r\n                    groups[group] = [];\r\n                }\r\n                groups[group].push(item);\r\n                return groups;\r\n            },\r\n            {} as Record<string, HistoryData[]>\r\n        );\r\n    }\r\n    // const [showChatHistoryBrowser, setShowChatHistoryBrowser] = useState<boolean>(false);\r\n    // const historyManager = useHistoryManager(provider);\r\n    const handleSelect = async (id: string) => {\r\n        const item = await historyManager.getItem(id);\r\n        if (item) {\r\n            onChatSelected(item);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        setHistory([]);\r\n        historyManager.resetContinuationToken();\r\n        setHasMoreHistory(true);\r\n    }, []);\r\n\r\n\r\n    const handleUploadFile = async (le: File) => {\r\n\r\n        setIsUploading(true); // Start the loading state\r\n        const file: File = le\r\n        console.log(file)\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\r\n            setUploadedFile(response);\r\n            setIsUploading(false);\r\n            getfiles();\r\n            // setUploadedFileError(undefined);\r\n            // listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsUploading(false);\r\n            // setUploadedFileError(t(\"upload.uploadedFileError\"));\r\n        }\r\n    };\r\n\r\n    const listUploadedFiles = async idToken => {\r\n        listUploadedFilesApi(idToken).then(files => {\r\n            setIsLoading(false);\r\n            setDeletionStatus({});\r\n            setUploadedFiles(files);\r\n        });\r\n    };\r\n\r\n    const handleRemoveFile = async (filename: string) => {\r\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n\r\n            await deleteUploadedFileApi(filename, idToken);\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id: string) => {\r\n        await historyManager.deleteItem(id);\r\n        setHistory(prevHistory => prevHistory.filter(item => item.id !== id));\r\n    };\r\n\r\n    const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n    const filteredConversations = conversationOptions.filter((conversation) =>\r\n        conversation.text.toLowerCase().includes(searchTerm.toLowerCase())\r\n    );\r\n\r\n    const handleDeleteConversation = async (conversationId) => {\r\n        await historyManager.deleteItem(conversationId);\r\n        setConversationOptions((prevOptions) =>\r\n            prevOptions.filter((option) => option.key !== conversationId)\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const getfiles = async () => {\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!isOpen) return;\r\n        if (notify) {\r\n            setHistory([]);\r\n            historyManager.resetContinuationToken();\r\n            setHasMoreHistory(true);\r\n        }\r\n    }, [isOpen, notify]);\r\n\r\n    const loadMoreHistory = async () => {\r\n        setIsLoading(() => true);\r\n        const items = await historyManager.getNextItems(HISTORY_COUNT_PER_LOAD);\r\n        if (items.length === 0) {\r\n            setHasMoreHistory(false);\r\n        }\r\n        setHistory(prevHistory => [...prevHistory, ...items]);\r\n        setIsLoading(() => false);\r\n    };\r\n    useEffect(() => {\r\n\r\n        getfiles();\r\n    }, []);\r\n    const { t } = useTranslation();\r\n\r\n    const InfiniteLoadingButton = ({ func }: { func: () => void }) => {\r\n        const buttonRef = useRef(null);\r\n\r\n        useEffect(() => {\r\n            const observer = new IntersectionObserver(\r\n                entries => {\r\n                    entries.forEach(entry => {\r\n                        if (entry.isIntersecting) {\r\n                            if (buttonRef.current) {\r\n                                func();\r\n                            }\r\n                        }\r\n                    });\r\n                },\r\n                {\r\n                    root: null,\r\n                    threshold: 0\r\n                }\r\n            );\r\n\r\n            if (buttonRef.current) {\r\n                observer.observe(buttonRef.current);\r\n            }\r\n\r\n            return () => {\r\n                if (buttonRef.current) {\r\n                    observer.unobserve(buttonRef.current);\r\n                }\r\n            };\r\n        }, []);\r\n\r\n        return <button ref={buttonRef} onClick={func} />;\r\n    };\r\n\r\n    useEffect(() => {\r\n        setConversationOptions(Object.entries(groupedHistory).flatMap(([group, items]) =>\r\n            items.map((item) => ({\r\n                key: item.id,\r\n                text: item.title,\r\n            }))\r\n        ))\r\n\r\n        // You can do something with conversationOptions here, e.g., update state.\r\n        // Example: setConversationOptions(conversationOptions);\r\n\r\n    }, [groupedHistory]); // Make sure to include the dependency in the array\r\n\r\n\r\n\r\n    return (\r\n        <div className={`${styles.leftSidebar} ${styles.visible}`}>\r\n            {isSidebarEnabled && (\r\n                <>\r\n                    {/* <h3>Conversations</h3>\r\n                     // <HistoryButton className={styles.commandButton} onClick={() => setIsHistoryPanelOpen((e) => !e)} />\r\n                    <Dropdown\r\n                        placeholder=\"Select a conversation\"\r\n                        options={conversationOptions}\r\n                        onChange={(_, option) => {\r\n                            // Safely handle undefined option and ensure key is a string\r\n                            if (option?.key) {\r\n                                handleSelect(String(option.key)); // Convert key to string if it's not already\r\n                            }\r\n                        }}\r\n                        onClick={() => loadMoreHistory()}\r\n                    />*/}\r\n                    {/* <h3>Conversations</h3>\r\n                    <div className={`${styles.dropdown} ${styles.dropdownWithSearch}`}>\r\n                        <button\r\n                            onClick={() => setIsDropdownOpen(!isDropdownOpen)}\r\n                            className={styles.dropbtn}\r\n                        >\r\n                            Select a conversation\r\n                        </button>\r\n                        {isDropdownOpen && (\r\n                            <div className={styles.dropdownContent}>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search conversations...\"\r\n                                    value={searchTerm}\r\n                                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                                    className={styles.searchInput}\r\n                                    onClick={() => loadMoreHistory()}\r\n                                />\r\n                                {filteredConversations.length > 0 ? (\r\n                                    filteredConversations.map((conversation) => (\r\n                                        <div\r\n                                            key={conversation.key}\r\n                                            className={styles.conversationOption}\r\n\r\n                                            onClick={() => {\r\n                                                handleSelect(String(conversation.key));\r\n                                                setIsDropdownOpen(false); // Close dropdown on selection\r\n                                            }}\r\n                                        >\r\n                                            <span>{conversation.text}</span>\r\n                                            <button\r\n                                                onClick={(e) => {\r\n                                                    e.stopPropagation(); // Prevent dropdown closing\r\n                                                    handleDeleteConversation(conversation.key);\r\n                                                }}\r\n                                                className={styles.deleteButton}\r\n                                            >\r\n                                                Delete\r\n                                            </button>\r\n                                        </div>\r\n                                    ))\r\n                                ) : (\r\n                                    <span className={styles.noOptions}>No conversations found</span>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    </div> */}\r\n\r\n\r\n\r\n\r\n                    <h3>Conversations</h3>\r\n                    <Dropdown\r\n                        className={styles.dropdownWithSearch}\r\n                        placeholder=\"Select a conversation\"\r\n                        onClick={() => loadMoreHistory()}\r\n                        // onRenderTitle={() => (\r\n                        //     <input\r\n                        //         type=\"text\"\r\n                        //         placeholder=\"Search conversations...\"\r\n                        //         value={searchTerm}\r\n                        //         onChange={(e) => setSearchTerm(e.target.value)}\r\n                        //         className={styles.searchInput}\r\n                        //     />\r\n                        // )}\r\n                        options={filteredConversations.map((conversation) => ({\r\n                            key: conversation.key,\r\n                            text: conversation.text, // Keep text simple for the Dropdown API\r\n                        }))}\r\n                        onRenderOption={(option) => (\r\n                            <div className={styles.conversationOption}>\r\n                                <span>{option?.text}</span>\r\n                                <button\r\n                                    onClick={(e) => {\r\n                                        e.stopPropagation(); // Prevent dropdown selection on delete click\r\n                                        handleDeleteConversation(option?.key);\r\n                                    }}\r\n                                    className={styles.deleteButton}\r\n                                >\r\n                                    <Delete24Regular />\r\n                                </button>\r\n                            </div>\r\n                        )}\r\n                        onChange={(_, option) => {\r\n                            if (option?.key) {\r\n                                handleSelect(String(option.key));\r\n                            }\r\n                        }}\r\n                    />\r\n\r\n\r\n\r\n\r\n\r\n                    {/* <Dropdown\r\n                className={styles.dropdownWithSearch}\r\n                placeholder=\"Select a conversation\"\r\n                onClick={() => loadMoreHistory()}\r\n                onRenderTitle={() => (\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Search conversations...\"\r\n                        value={searchTerm}\r\n                        onChange={(e) => setSearchTerm(e.target.value)}\r\n                        className={styles.searchInput}\r\n                    />\r\n                )}\r\n                options={filteredConversations.map((conversation) => ({\r\n                    key: conversation.key,\r\n                    text: (\r\n                        <div className={styles.conversationOption}>\r\n                            <span>{conversation.text}</span>\r\n                            <button\r\n                                onClick={(e) => {\r\n                                    e.stopPropagation(); // Prevent dropdown selection on delete click\r\n                                    handleDeleteConversation(conversation.key);\r\n                                }}\r\n                                className={styles.deleteButton}\r\n                            >\r\n                                Delete\r\n                            </button>\r\n                        </div>\r\n                    ),\r\n                }))}\r\n                onChange={(_, option) => {\r\n                    if (option?.key) {\r\n                        handleSelect(String(option.key));\r\n                    }\r\n                }}\r\n            /> */}\r\n\r\n\r\n\r\n\r\n\r\n                    {/* <div>\r\n                        <div>\r\n                            {Object.entries(groupedHistory).map(([group, items]) => (\r\n                                <div key={group} className={styles.group}>\r\n                                    <p className={styles.groupLabel}>{t(group)}</p>\r\n                                    {items.map(item => (\r\n                                        <HistoryItem key={item.id} item={item} onSelect={handleSelect} onDelete={handleDelete} />\r\n                                    ))}\r\n                                </div>\r\n                            ))}\r\n                            {history.length === 0 && <p>{t(\"history.noHistory\")}</p>}\r\n                            {hasMoreHistory && !isLoading && <InfiniteLoadingButton func={loadMoreHistory} />}\r\n                        </div>\r\n                    </div> */}\r\n\r\n                    {/* File Collection Section */}\r\n                    <div>\r\n                        <h3\r\n                            className={styles.sectionHeader}\r\n                            onClick={() => setFileCollectionOpen(!isFileCollectionOpen)}\r\n                        >\r\n                            File Collection\r\n                            <FontAwesomeIcon\r\n                                icon={isFileCollectionOpen ? faAngleDoubleUp : faAngleDoubleDown}\r\n                                className={styles.sectionToggleIcon}\r\n                            />\r\n                        </h3>\r\n                        {isFileCollectionOpen && (\r\n                            <div>\r\n                                {/* Search Bar */}\r\n                                <input\r\n                                    type=\"text\"\r\n                                    placeholder=\"Search files...\"\r\n                                    className={styles.searchInput}\r\n                                    value={searchQuery}\r\n                                    onChange={(e) => setSearchQuery(e.target.value)}\r\n                                />\r\n                                {/* File List with Delete Option */}\r\n                                <div\r\n                                    className={`${styles.fileList} ${uploadedFiles.length > 3 ? styles.scrollableList : \"\"\r\n                                        }`}\r\n                                >\r\n                                    {uploadedFiles.length > 0 ? (\r\n                                        <ul>\r\n                                            {uploadedFiles\r\n                                                .filter((file) =>\r\n                                                    file.toLowerCase().includes(searchQuery.toLowerCase())\r\n                                                )\r\n                                                .map((file, index) => (\r\n                                                    <li key={index}>\r\n                                                        {file}\r\n                                                        <button\r\n                                                            className={styles.deleteButton}\r\n                                                            onClick={() => handleRemoveFile(file)}\r\n                                                        >\r\n                                                            <Delete24Regular />\r\n                                                        </button>\r\n                                                    </li>\r\n                                                ))}\r\n                                        </ul>\r\n                                    ) : (\r\n                                        <p>No files uploaded yet.</p>\r\n                                    )}\r\n                                </div>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* <div>\r\n                                //  <button className={styles.dropdownButton}>Search All</button>\r\n                                // <button className={styles.dropdownButton}>Search in Files</button> \r\n                                <div className={styles.fileList}>\r\n                                    {uploadedFiles.length > 0 ? (\r\n                                        <ul>\r\n                                            {uploadedFiles.map((file, index) => (\r\n                                                <li key={index}>{file}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    ) : (\r\n                                        <p>No files uploaded yet.</p>\r\n                                    )}\r\n                                </div>\r\n                            </div> */}\r\n\r\n\r\n                    {/* GraphRAG Collection Section */}\r\n                    {/* <div>\r\n                        <h3\r\n                            className={styles.sectionHeader}\r\n                            onClick={() => setGraphRAGCollectionOpen(!isGraphRAGCollectionOpen)}\r\n                        >\r\n                            GraphRAG Collection\r\n                            <FontAwesomeIcon\r\n                                icon={isGraphRAGCollectionOpen ? faAngleDoubleUp : faAngleDoubleDown}\r\n                                className={styles.sectionToggleIcon}\r\n                            />\r\n                        </h3>\r\n                        {isGraphRAGCollectionOpen && (\r\n                            <div>\r\n                                <button className={styles.dropdownButton}>Search Graphs</button>\r\n                            </div>\r\n                        )}\r\n                    </div> */}\r\n\r\n                    {/* Quick Upload Section */}\r\n                    <div>\r\n                        <h3\r\n                            className={styles.sectionHeader}\r\n                            onClick={() => setQuickUploadOpen(!isQuickUploadOpen)}\r\n                        >\r\n                            Quick Upload\r\n                            <FontAwesomeIcon\r\n                                icon={isQuickUploadOpen ? faAngleDoubleUp : faAngleDoubleDown}\r\n                                className={styles.sectionToggleIcon}\r\n                            />\r\n                        </h3>\r\n                        {isQuickUploadOpen && (\r\n                            <div className={styles.uploadContainer}>\r\n                                {!isUploading ? <p>Drop File Here</p> : null}\r\n                                {isUploading ? (\r\n                                    <div>\r\n                                        <p>1 file is uploading. Please wait...</p>\r\n                                    </div>\r\n                                ) : loggedIn ? ( // Check if the user is logged in\r\n                                    <FileUpload handleUploadFile={handleUploadFile} />\r\n                                ) : (\r\n                                    <p>Please log in to upload files.</p> // Message for non-logged-in users\r\n                                )}\r\n                            </div>\r\n                            // <div className={styles.uploadContainer}>\r\n                            //     <p>Drop File Here</p>\r\n                            //     {isUploading ? (\r\n                            //         <div>\r\n                            //             <p>1 file is uploading. Please wait...</p>\r\n                            //         </div>\r\n                            //     ) : (\r\n                            //         // <FileUpload onFileUpload={(acceptedFiles) => handleFileUpload(acceptedFiles)} />\r\n                            //         <FileUpload handleUploadFile={handleUploadFile} />\r\n                            //         //  <UploadFile className = {styles.commandButton} disabled= {!loggedIn}/>\r\n\r\n                            //     )}\r\n                            // </div>\r\n                        )}\r\n                    </div>\r\n\r\n                    {/* Feedback Section */}\r\n                    <div>\r\n                        <h3\r\n                            className={styles.sectionHeader}\r\n                            onClick={() => setFeedbackOpen(!isFeedbackOpen)}\r\n                        >\r\n                            Feedback\r\n                            <FontAwesomeIcon\r\n                                icon={isFeedbackOpen ? faAngleDoubleUp : faAngleDoubleDown}\r\n                                className={styles.sectionToggleIcon}\r\n                            />\r\n                        </h3>\r\n                        {isFeedbackOpen && (\r\n                            <div>\r\n                                <TextField placeholder=\"Provide feedback here...\" multiline />\r\n                                <button className={styles.feedbackButton}>Submit Feedback</button>\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LeftSidebar;","import { renderToStaticMarkup } from \"react-dom/server\";\r\nimport { getCitationFilePath } from \"../../api\";\r\n\r\ntype HtmlParsedAnswer = {\r\n    answerHtml: string;\r\n    citations: string[];\r\n};\r\n\r\nexport function parseAnswerToHtml(answer: string, isStreaming: boolean, onCitationClicked: (citationFilePath: string) => void): HtmlParsedAnswer {\r\n    const citations: string[] = [];\r\n\r\n    // trim any whitespace from the end of the answer after removing follow-up questions\r\n    let parsedAnswer = answer.trim();\r\n\r\n    // Omit a citation that is still being typed during streaming\r\n    if (isStreaming) {\r\n        let lastIndex = parsedAnswer.length;\r\n        for (let i = parsedAnswer.length - 1; i >= 0; i--) {\r\n            if (parsedAnswer[i] === \"]\") {\r\n                break;\r\n            } else if (parsedAnswer[i] === \"[\") {\r\n                lastIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        const truncatedAnswer = parsedAnswer.substring(0, lastIndex);\r\n        parsedAnswer = truncatedAnswer;\r\n    }\r\n\r\n    const parts = parsedAnswer.split(/\\[([^\\]]+)\\]/g);\r\n\r\n    const fragments: string[] = parts.map((part, index) => {\r\n        if (index % 2 === 0) {\r\n            return part;\r\n        } else {\r\n            let citationIndex: number;\r\n            if (citations.indexOf(part) !== -1) {\r\n                citationIndex = citations.indexOf(part) + 1;\r\n            } else {\r\n                citations.push(part);\r\n                citationIndex = citations.length;\r\n            }\r\n\r\n            const path = getCitationFilePath(part);\r\n\r\n            return renderToStaticMarkup(\r\n                <a className=\"supContainer\" title={part} onClick={() => onCitationClicked(path)}>\r\n                    <sup>{citationIndex}</sup>\r\n                </a>\r\n            );\r\n        }\r\n    });\r\n\r\n    return {\r\n        answerHtml: fragments.join(\"\"),\r\n        citations\r\n    };\r\n}\r\n","import { Sparkle28Filled } from \"@fluentui/react-icons\";\r\n\r\nexport const AnswerIcon = () => {\r\n    return <Sparkle28Filled primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" aria-label=\"Answer logo\" />;\r\n};\r\n","import i18next from \"i18next\";\r\nimport LanguageDetector from \"i18next-browser-languagedetector\";\r\nimport HttpApi from \"i18next-http-backend\";\r\nimport { initReactI18next } from \"react-i18next\";\r\n\r\nimport enTranslation from \"../locales/en/translation.json\";\r\nimport esTranslation from \"../locales/es/translation.json\";\r\nimport jaTranslation from \"../locales/ja/translation.json\";\r\nimport frTranslation from \"../locales/fr/translation.json\";\r\n\r\nexport const supportedLngs: { [key: string]: { name: string; locale: string } } = {\r\n    en: {\r\n        name: \"English\",\r\n        locale: \"en-US\"\r\n    },\r\n    es: {\r\n        name: \"Español\",\r\n        locale: \"es-ES\"\r\n    },\r\n    fr: {\r\n        name: \"Français\",\r\n        locale: \"fr-FR\"\r\n    },\r\n    ja: {\r\n        name: \"日本語\",\r\n        locale: \"ja-JP\"\r\n    }\r\n};\r\n\r\ni18next\r\n    .use(HttpApi)\r\n    .use(LanguageDetector)\r\n    .use(initReactI18next)\r\n    // init i18next\r\n    // for all options read: https://www.i18next.com/overview/configuration-options\r\n    .init({\r\n        resources: {\r\n            en: { translation: enTranslation },\r\n            es: { translation: esTranslation },\r\n            fr: { translation: frTranslation },\r\n            ja: { translation: jaTranslation }\r\n        },\r\n        fallbackLng: \"en\",\r\n        supportedLngs: Object.keys(supportedLngs),\r\n        debug: import.meta.env.DEV,\r\n        interpolation: {\r\n            escapeValue: false // not needed for react as it escapes by default\r\n        }\r\n    });\r\n\r\nexport default i18next;\r\n","import { useState } from \"react\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { supportedLngs } from \"../../i18n/config\";\r\n\r\ninterface Props {\r\n    answer: string;\r\n}\r\n\r\nconst SpeechSynthesis = (window as any).speechSynthesis || (window as any).webkitSpeechSynthesis;\r\n\r\nlet synth: SpeechSynthesis | null = null;\r\n\r\ntry {\r\n    synth = SpeechSynthesis;\r\n} catch (err) {\r\n    console.error(\"SpeechSynthesis is not supported\");\r\n}\r\n\r\nconst getUtterance = function (text: string, lngCode: string = \"en-US\") {\r\n    if (synth) {\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.lang = lngCode;\r\n        utterance.volume = 1;\r\n        utterance.rate = 1;\r\n        utterance.pitch = 1;\r\n\r\n        let voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === lngCode)[0];\r\n        if (!voice) {\r\n            voice = synth.getVoices().filter((voice: SpeechSynthesisVoice) => voice.lang === \"en-US\")[0];\r\n        }\r\n\r\n        utterance.voice = voice;\r\n        return utterance;\r\n    }\r\n};\r\n\r\nexport const SpeechOutputBrowser = ({ answer }: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    const currentLng = i18n.language;\r\n    let lngCode = supportedLngs[currentLng]?.locale;\r\n    if (!lngCode) {\r\n        lngCode = \"en-US\";\r\n    }\r\n    const [isPlaying, setIsPlaying] = useState<boolean>(false);\r\n\r\n    const startOrStopSpeech = (answer: string) => {\r\n        if (synth != null) {\r\n            if (isPlaying) {\r\n                synth.cancel(); // removes all utterances from the utterance queue.\r\n                setIsPlaying(false);\r\n                return;\r\n            }\r\n            const utterance: SpeechSynthesisUtterance | undefined = getUtterance(answer, lngCode);\r\n\r\n            if (!utterance) {\r\n                return;\r\n            }\r\n\r\n            synth.speak(utterance);\r\n\r\n            utterance.onstart = () => {\r\n                setIsPlaying(true);\r\n                return;\r\n            };\r\n\r\n            utterance.onend = () => {\r\n                setIsPlaying(false);\r\n                return;\r\n            };\r\n        }\r\n    };\r\n    const color = isPlaying ? \"red\" : \"black\";\r\n\r\n    return (\r\n        <IconButton\r\n            style={{ color: color }}\r\n            iconProps={{ iconName: \"Volume3\" }}\r\n            title={t(\"tooltips.speakAnswer\")}\r\n            ariaLabel={t(\"tooltips.speakAnswer\")}\r\n            onClick={() => startOrStopSpeech(answer)}\r\n            disabled={!synth}\r\n        />\r\n    );\r\n};\r\n","import { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport { getSpeechApi, SpeechConfig } from \"../../api\";\r\n\r\ninterface Props {\r\n    answer: string;\r\n    speechConfig: SpeechConfig;\r\n    index: number;\r\n    isStreaming: boolean;\r\n}\r\n\r\nexport const SpeechOutputAzure = ({ answer, speechConfig, index, isStreaming }: Props) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [localPlayingState, setLocalPlayingState] = useState(false);\r\n    const { t } = useTranslation();\r\n\r\n    const playAudio = async (url: string) => {\r\n        speechConfig.audio.src = url;\r\n        await speechConfig.audio\r\n            .play()\r\n            .then(() => {\r\n                speechConfig.audio.onended = () => {\r\n                    speechConfig.setIsPlaying(false);\r\n                    setLocalPlayingState(false);\r\n                };\r\n                speechConfig.setIsPlaying(true);\r\n                setLocalPlayingState(true);\r\n            })\r\n            .catch(() => {\r\n                alert(\"Failed to play speech output.\");\r\n                console.error(\"Failed to play speech output.\");\r\n                speechConfig.setIsPlaying(false);\r\n                setLocalPlayingState(false);\r\n            });\r\n    };\r\n\r\n    const startOrStopSpeech = async (answer: string) => {\r\n        if (speechConfig.isPlaying) {\r\n            speechConfig.audio.pause();\r\n            speechConfig.audio.currentTime = 0;\r\n            speechConfig.setIsPlaying(false);\r\n            setLocalPlayingState(false);\r\n            return;\r\n        }\r\n        if (speechConfig.speechUrls[index]) {\r\n            playAudio(speechConfig.speechUrls[index]);\r\n            return;\r\n        }\r\n        setIsLoading(true);\r\n        await getSpeechApi(answer).then(async speechUrl => {\r\n            if (!speechUrl) {\r\n                alert(\"Speech output is not available.\");\r\n                console.error(\"Speech output is not available.\");\r\n                return;\r\n            }\r\n            setIsLoading(false);\r\n            speechConfig.setSpeechUrls(speechConfig.speechUrls.map((url, i) => (i === index ? speechUrl : url)));\r\n            playAudio(speechUrl);\r\n        });\r\n    };\r\n\r\n    const color = localPlayingState ? \"red\" : \"black\";\r\n\r\n    // We always preload the Sync icon in hidden mode so that there's no visual glitch when icon changes\r\n    return isLoading ? (\r\n        <IconButton style={{ color: color }} iconProps={{ iconName: \"Sync\" }} title=\"Loading speech\" ariaLabel=\"Loading speech\" disabled={true} />\r\n    ) : (\r\n        <>\r\n            <IconButton iconProps={{ iconName: \"Sync\" }} ariaHidden={true} disabled={true} style={{ display: \"none\" }} />\r\n            <IconButton\r\n                style={{ color: color }}\r\n                iconProps={{ iconName: \"Volume3\" }}\r\n                title={t(\"tooltips.speakAnswer\")}\r\n                ariaLabel={t(\"tooltips.speakAnswer\")}\r\n                onClick={() => startOrStopSpeech(answer)}\r\n                disabled={isStreaming}\r\n            />\r\n        </>\r\n    );\r\n};\r\n","import { useMemo } from \"react\";\r\nimport { Stack, IconButton } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DOMPurify from \"dompurify\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\nimport rehypeRaw from \"rehype-raw\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { ChatAppResponse, getCitationFilePath, SpeechConfig } from \"../../api\";\r\nimport { parseAnswerToHtml } from \"./AnswerParser\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\nimport { SpeechOutputBrowser } from \"./SpeechOutputBrowser\";\r\nimport { SpeechOutputAzure } from \"./SpeechOutputAzure\";\r\n\r\ninterface Props {\r\n    answer: ChatAppResponse;\r\n    index: number;\r\n    speechConfig: SpeechConfig;\r\n    isSelected?: boolean;\r\n    isStreaming: boolean;\r\n    onCitationClicked: (filePath: string) => void;\r\n    onThoughtProcessClicked: () => void;\r\n    onSupportingContentClicked: () => void;\r\n    onFollowupQuestionClicked?: (question: string) => void;\r\n    onMindmapClicked?: () => void;\r\n    showFollowupQuestions?: boolean;\r\n    showSpeechOutputBrowser?: boolean;\r\n    showSpeechOutputAzure?: boolean;\r\n}\r\n\r\nexport const Answer = ({\r\n    answer,\r\n    index,\r\n    speechConfig,\r\n    isSelected,\r\n    isStreaming,\r\n    onCitationClicked,\r\n    onMindmapClicked,\r\n    onThoughtProcessClicked,\r\n    onSupportingContentClicked,\r\n    onFollowupQuestionClicked,\r\n    showFollowupQuestions,\r\n    showSpeechOutputAzure,\r\n    showSpeechOutputBrowser\r\n}: Props) => {\r\n    const followupQuestions = answer.context?.followup_questions;\r\n    const messageContent = answer.message.content;\r\n    const parsedAnswer = useMemo(() => parseAnswerToHtml(messageContent, isStreaming, onCitationClicked), [answer]);\r\n    const { t } = useTranslation();\r\n    const sanitizedAnswerHtml = DOMPurify.sanitize(parsedAnswer.answerHtml);\r\n\r\n    return (\r\n        <Stack className={`${styles.answerContainer} ${isSelected && styles.selected}`} verticalAlign=\"space-between\">\r\n            <Stack.Item>\r\n                <Stack horizontal horizontalAlign=\"space-between\">\r\n                    <AnswerIcon />\r\n                    <div>\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title={t(\"tooltips.showThoughtProcess\")}\r\n                            ariaLabel={t(\"tooltips.showThoughtProcess\")}\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.context.thoughts?.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"Lightbulb\" }}\r\n                            title={t(\"tooltips.showThoughtProcess\")}\r\n                            ariaLabel={t(\"tooltips.showThoughtProcess\")}\r\n                            onClick={() => onThoughtProcessClicked()}\r\n                            disabled={!answer.context.thoughts?.length}\r\n                        />\r\n                        <IconButton\r\n                            style={{ color: \"black\" }}\r\n                            iconProps={{ iconName: \"ClipboardList\" }}\r\n                            title={t(\"tooltips.showSupportingContent\")}\r\n                            ariaLabel={t(\"tooltips.showSupportingContent\")}\r\n                            onClick={() => onSupportingContentClicked()}\r\n                            disabled={!answer.context.data_points}\r\n                        />\r\n                        {showSpeechOutputAzure && (\r\n                            <SpeechOutputAzure answer={sanitizedAnswerHtml} index={index} speechConfig={speechConfig} isStreaming={isStreaming} />\r\n                        )}\r\n                        {showSpeechOutputBrowser && <SpeechOutputBrowser answer={sanitizedAnswerHtml} />}\r\n                    </div>\r\n                </Stack>\r\n            </Stack.Item>\r\n\r\n            <Stack.Item grow>\r\n                <div className={styles.answerText}>\r\n                    <ReactMarkdown children={sanitizedAnswerHtml} rehypePlugins={[rehypeRaw]} remarkPlugins={[remarkGfm]} />\r\n                </div>\r\n            </Stack.Item>\r\n\r\n            {!!parsedAnswer.citations.length && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap tokens={{ childrenGap: 5 }}>\r\n                        <span className={styles.citationLearnMore}>{t(\"citationWithColon\")}</span>\r\n                        {parsedAnswer.citations.map((x, i) => {\r\n                            const path = getCitationFilePath(x);\r\n                            return (\r\n                                <a key={i} className={styles.citation} title={x} onClick={() => onCitationClicked(path)}>\r\n                                    {`${++i}. ${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n\r\n            {!!followupQuestions?.length && showFollowupQuestions && onFollowupQuestionClicked && (\r\n                <Stack.Item>\r\n                    <Stack horizontal wrap className={`${!!parsedAnswer.citations.length ? styles.followupQuestionsList : \"\"}`} tokens={{ childrenGap: 6 }}>\r\n                        <span className={styles.followupQuestionLearnMore}>{t(\"followupQuestions\")}</span>\r\n                        {followupQuestions.map((x, i) => {\r\n                            return (\r\n                                <a key={i} className={styles.followupQuestion} title={x} onClick={() => onFollowupQuestionClicked(x)}>\r\n                                    {`${x}`}\r\n                                </a>\r\n                            );\r\n                        })}\r\n                    </Stack>\r\n                </Stack.Item>\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { animated, useSpring } from \"@react-spring/web\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\nimport { AnswerIcon } from \"./AnswerIcon\";\r\n\r\nexport const AnswerLoading = () => {\r\n    const { t, i18n } = useTranslation();\r\n    const animatedStyles = useSpring({\r\n        from: { opacity: 0 },\r\n        to: { opacity: 1 }\r\n    });\r\n\r\n    return (\r\n        <animated.div style={{ ...animatedStyles }}>\r\n            <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n                <AnswerIcon />\r\n                <Stack.Item grow>\r\n                    <p className={styles.answerText}>\r\n                        {t(\"generatingAnswer\")}\r\n                        <span className={styles.loadingdots} />\r\n                    </p>\r\n                </Stack.Item>\r\n            </Stack>\r\n        </animated.div>\r\n    );\r\n};\r\n","import { Stack, PrimaryButton } from \"@fluentui/react\";\r\nimport { ErrorCircle24Regular } from \"@fluentui/react-icons\";\r\n\r\nimport styles from \"./Answer.module.css\";\r\n\r\ninterface Props {\r\n    error: string;\r\n    onRetry: () => void;\r\n}\r\n\r\nexport const AnswerError = ({ error, onRetry }: Props) => {\r\n    return (\r\n        <Stack className={styles.answerContainer} verticalAlign=\"space-between\">\r\n            <ErrorCircle24Regular aria-hidden=\"true\" aria-label=\"Error icon\" primaryFill=\"red\" />\r\n\r\n            <Stack.Item grow>\r\n                <p className={styles.answerText}>{error}</p>\r\n            </Stack.Item>\r\n\r\n            <PrimaryButton className={styles.retryButton} onClick={onRetry} text=\"Retry\" />\r\n        </Stack>\r\n    );\r\n};\r\n","import { SetStateAction, useState } from \"react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Mic28Filled } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { supportedLngs } from \"../../i18n/config\";\r\n\r\ninterface Props {\r\n    updateQuestion: (question: string) => void;\r\n}\r\n\r\nconst useCustomSpeechRecognition = () => {\r\n    const { i18n } = useTranslation();\r\n    const currentLng = i18n.language;\r\n    let lngCode = supportedLngs[currentLng]?.locale;\r\n    if (!lngCode) {\r\n        lngCode = \"en-US\";\r\n    }\r\n\r\n    const SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\r\n    let speechRecognition: {\r\n        continuous: boolean;\r\n        lang: string;\r\n        interimResults: boolean;\r\n        maxAlternatives: number;\r\n        start: () => void;\r\n        onresult: (event: { results: { transcript: SetStateAction<string> }[][] }) => void;\r\n        onend: () => void;\r\n        onerror: (event: { error: string }) => void;\r\n        stop: () => void;\r\n    } | null = null;\r\n\r\n    try {\r\n        speechRecognition = new SpeechRecognition();\r\n        if (speechRecognition != null) {\r\n            speechRecognition.lang = lngCode;\r\n            speechRecognition.interimResults = true;\r\n        }\r\n    } catch (err) {\r\n        console.error(\"SpeechRecognition not supported\");\r\n        speechRecognition = null;\r\n    }\r\n\r\n    return speechRecognition;\r\n};\r\n\r\nexport const SpeechInput = ({ updateQuestion }: Props) => {\r\n    let speechRecognition = useCustomSpeechRecognition();\r\n    const { t } = useTranslation();\r\n    const [isRecording, setIsRecording] = useState<boolean>(false);\r\n    const startRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n\r\n        speechRecognition.onresult = (event: { results: { transcript: SetStateAction<string> }[][] }) => {\r\n            let input = \"\";\r\n            for (const result of event.results) {\r\n                input += result[0].transcript;\r\n            }\r\n            updateQuestion(input);\r\n        };\r\n        speechRecognition.onend = () => {\r\n            // NOTE: In some browsers (e.g. Chrome), the recording will stop automatically after a few seconds of silence.\r\n            setIsRecording(false);\r\n        };\r\n        speechRecognition.onerror = (event: { error: string }) => {\r\n            if (speechRecognition) {\r\n                speechRecognition.stop();\r\n                if (event.error == \"no-speech\") {\r\n                    alert(\"No speech was detected. Please check your system audio settings and try again.\");\r\n                } else if (event.error == \"language-not-supported\") {\r\n                    alert(\r\n                        `Speech recognition error detected: ${event.error}. The speech recognition input functionality does not yet work on all browsers, like Edge in Mac OS X with ARM chips. Try another browser/OS.`\r\n                    );\r\n                } else {\r\n                    alert(`Speech recognition error detected: ${event.error}.`);\r\n                }\r\n            }\r\n        };\r\n\r\n        setIsRecording(true);\r\n        speechRecognition.start();\r\n    };\r\n\r\n    const stopRecording = () => {\r\n        if (speechRecognition == null) {\r\n            console.error(\"SpeechRecognition not supported\");\r\n            return;\r\n        }\r\n        speechRecognition.stop();\r\n        setIsRecording(false);\r\n    };\r\n\r\n    if (speechRecognition == null) {\r\n        return <></>;\r\n    }\r\n    return (\r\n        <>\r\n            {!isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={t(\"tooltips.askWithVoice\")} relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} onClick={startRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n            {isRecording && (\r\n                <div className={styles.questionInputButtonsContainer}>\r\n                    <Tooltip content={t(\"tooltips.stopRecording\")} relationship=\"label\">\r\n                        <Button size=\"large\" icon={<Mic28Filled primaryFill=\"rgba(250, 0, 0, 0.7)\" />} disabled={!isRecording} onClick={stopRecording} />\r\n                    </Tooltip>\r\n                </div>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import { useState, useEffect, useContext } from \"react\";\r\nimport { Stack, TextField } from \"@fluentui/react\";\r\nimport { Button, Tooltip } from \"@fluentui/react-components\";\r\nimport { Send28Filled } from \"@fluentui/react-icons\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./QuestionInput.module.css\";\r\nimport { SpeechInput } from \"./SpeechInput\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { requireLogin } from \"../../authConfig\";\r\n\r\ninterface Props {\r\n    onSend: (question: string) => void;\r\n    disabled: boolean;\r\n    initQuestion?: string;\r\n    placeholder?: string;\r\n    clearOnSend?: boolean;\r\n    showSpeechInput?: boolean;\r\n}\r\n\r\nexport const QuestionInput = ({ onSend, disabled, placeholder, clearOnSend, initQuestion, showSpeechInput }: Props) => {\r\n    const [question, setQuestion] = useState<string>(\"\");\r\n    const { loggedIn } = useContext(LoginContext);\r\n    const { t } = useTranslation();\r\n    const [isComposing, setIsComposing] = useState(false);\r\n\r\n    useEffect(() => {\r\n        initQuestion && setQuestion(initQuestion);\r\n    }, [initQuestion]);\r\n\r\n    const sendQuestion = () => {\r\n        if (disabled || !question.trim()) {\r\n            return;\r\n        }\r\n\r\n        onSend(question);\r\n\r\n        if (clearOnSend) {\r\n            setQuestion(\"\");\r\n        }\r\n    };\r\n\r\n    const onEnterPress = (ev: React.KeyboardEvent<Element>) => {\r\n        if (isComposing) return;\r\n\r\n        if (ev.key === \"Enter\" && !ev.shiftKey) {\r\n            ev.preventDefault();\r\n            sendQuestion();\r\n        }\r\n    };\r\n\r\n    const handleCompositionStart = () => {\r\n        setIsComposing(true);\r\n    };\r\n    const handleCompositionEnd = () => {\r\n        setIsComposing(false);\r\n    };\r\n\r\n    const onQuestionChange = (_ev: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        if (!newValue) {\r\n            setQuestion(\"\");\r\n        } else if (newValue.length <= 1000) {\r\n            setQuestion(newValue);\r\n        }\r\n    };\r\n\r\n    const disableRequiredAccessControl = requireLogin && !loggedIn;\r\n    const sendQuestionDisabled = disabled || !question.trim() || requireLogin;\r\n\r\n    if (disableRequiredAccessControl) {\r\n        placeholder = \"Please login to continue...\";\r\n    }\r\n\r\n    return (\r\n        <Stack horizontal className={styles.questionInputContainer}>\r\n            <TextField\r\n                className={styles.questionInputTextArea}\r\n                disabled={disableRequiredAccessControl}\r\n                placeholder={placeholder}\r\n                multiline\r\n                resizable={false}\r\n                borderless\r\n                value={question}\r\n                onChange={onQuestionChange}\r\n                onKeyDown={onEnterPress}\r\n                onCompositionStart={handleCompositionStart}\r\n                onCompositionEnd={handleCompositionEnd}\r\n            />\r\n            <div className={styles.questionInputButtonsContainer}>\r\n                <Tooltip content={t(\"tooltips.submitQuestion\")} relationship=\"label\">\r\n                    <Button size=\"large\" icon={<Send28Filled primaryFill=\"rgba(115, 118, 225, 1)\" />} disabled={sendQuestionDisabled} onClick={sendQuestion} />\r\n                </Tooltip>\r\n            </div>\r\n            {showSpeechInput && <SpeechInput updateQuestion={setQuestion} />}\r\n        </Stack>\r\n    );\r\n};\r\n","import styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    text: string;\r\n    value: string;\r\n    onClick: (value: string) => void;\r\n}\r\n\r\nexport const Example = ({ text, value, onClick }: Props) => {\r\n    return (\r\n        <div className={styles.example} onClick={() => onClick(value)}>\r\n            <p className={styles.exampleText}>{text}</p>\r\n        </div>\r\n    );\r\n};\r\n","import { Example } from \"./Example\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./Example.module.css\";\r\n\r\ninterface Props {\r\n    onExampleClicked: (value: string) => void;\r\n    useGPT4V?: boolean;\r\n}\r\n\r\nexport const ExampleList = ({ onExampleClicked, useGPT4V }: Props) => {\r\n    const { t } = useTranslation();\r\n\r\n    const DEFAULT_EXAMPLES: string[] = [t(\"defaultExamples.1\"), t(\"defaultExamples.2\"), t(\"defaultExamples.3\")];\r\n    const GPT4V_EXAMPLES: string[] = [t(\"gpt4vExamples.1\"), t(\"gpt4vExamples.2\"), t(\"gpt4vExamples.3\")];\r\n\r\n    return (\r\n        <ul className={styles.examplesNavList}>\r\n            {(useGPT4V ? GPT4V_EXAMPLES : DEFAULT_EXAMPLES).map((question, i) => (\r\n                <li key={i}>\r\n                    <Example text={question} value={question} onClick={onExampleClicked} />\r\n                </li>\r\n            ))}\r\n        </ul>\r\n    );\r\n};\r\n","import styles from \"./UserChatMessage.module.css\";\r\n\r\ninterface Props {\r\n    message: string;\r\n}\r\n\r\nexport const UserChatMessage = ({ message }: Props) => {\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.message}>{message}</div>\r\n        </div>\r\n    );\r\n};\r\n","import { ITextFieldProps, DefaultButton, IconButton, IButtonStyles, Callout, IStackTokens, Stack, IStackStyles, initializeIcons } from \"@fluentui/react\";\r\nimport { useBoolean, useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nconst stackTokens: IStackTokens = {\r\n    childrenGap: 4,\r\n    maxWidth: 300\r\n};\r\n\r\nconst labelCalloutStackStyles: Partial<IStackStyles> = { root: { padding: 20 } };\r\nconst iconButtonStyles: Partial<IButtonStyles> = { root: { marginBottom: -3 } };\r\nconst iconProps = { iconName: \"Info\" };\r\n\r\ninterface IHelpCalloutProps {\r\n    label: string | undefined;\r\n    labelId: string;\r\n    fieldId: string | undefined;\r\n    helpText: string;\r\n}\r\n\r\nexport const HelpCallout = (props: IHelpCalloutProps): JSX.Element => {\r\n    const [isCalloutVisible, { toggle: toggleIsCalloutVisible }] = useBoolean(false);\r\n    const descriptionId: string = useId(\"description\");\r\n    const iconButtonId: string = useId(\"iconButton\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <>\r\n            <Stack horizontal verticalAlign=\"center\" tokens={stackTokens}>\r\n                <label id={props.labelId} htmlFor={props.fieldId}>\r\n                    {props.label}\r\n                </label>\r\n                <IconButton\r\n                    id={iconButtonId}\r\n                    iconProps={iconProps}\r\n                    title={t(\"tooltips.info\")}\r\n                    ariaLabel={t(\"tooltips.info\")}\r\n                    onClick={toggleIsCalloutVisible}\r\n                    styles={iconButtonStyles}\r\n                />\r\n            </Stack>\r\n            {isCalloutVisible && (\r\n                <Callout target={\"#\" + iconButtonId} setInitialFocus onDismiss={toggleIsCalloutVisible} ariaDescribedBy={descriptionId} role=\"alertdialog\">\r\n                    <Stack tokens={stackTokens} horizontalAlign=\"start\" styles={labelCalloutStackStyles}>\r\n                        <span id={descriptionId}>{props.helpText}</span>\r\n                        <DefaultButton onClick={toggleIsCalloutVisible}>{t(\"labels.closeButton\")}</DefaultButton>\r\n                    </Stack>\r\n                </Callout>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n","import DOMPurify from \"dompurify\";\r\n\r\ntype ParsedSupportingContentItem = {\r\n    title: string;\r\n    content: string;\r\n};\r\n\r\nexport function parseSupportingContentItem(item: string): ParsedSupportingContentItem {\r\n    // Assumes the item starts with the file name followed by : and the content.\r\n    // Example: \"sdp_corporate.pdf: this is the content that follows\".\r\n    const parts = item.split(\": \");\r\n    const title = parts[0];\r\n    const content = DOMPurify.sanitize(parts.slice(1).join(\": \"));\r\n\r\n    return {\r\n        title,\r\n        content\r\n    };\r\n}\r\n","import { parseSupportingContentItem } from \"./SupportingContentParser\";\r\n\r\nimport styles from \"./SupportingContent.module.css\";\r\n\r\ninterface Props {\r\n    supportingContent: string[] | { text: string[]; images?: { url: string }[] };\r\n}\r\n\r\nexport const SupportingContent = ({ supportingContent }: Props) => {\r\n    const textItems = Array.isArray(supportingContent) ? supportingContent : supportingContent.text;\r\n    const imageItems = !Array.isArray(supportingContent) ? supportingContent?.images : [];\r\n    return (\r\n        <ul className={styles.supportingContentNavList}>\r\n            {textItems.map((c, ind) => {\r\n                const parsed = parseSupportingContentItem(c);\r\n                return (\r\n                    <li className={styles.supportingContentItem} key={ind}>\r\n                        <h4 className={styles.supportingContentItemHeader}>{parsed.title}</h4>\r\n                        <p className={styles.supportingContentItemText} dangerouslySetInnerHTML={{ __html: parsed.content }} />\r\n                    </li>\r\n                );\r\n            })}\r\n            {imageItems?.map((img, ind) => {\r\n                return <img className={styles.supportingContentItemImage} src={img.url} key={ind} />;\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","export enum AnalysisPanelTabs {\r\n    ThoughtProcessTab = \"thoughtProcess\",\r\n    SupportingContentTab = \"supportingContent\",\r\n    CitationTab = \"citation\"\r\n}\r\n","import { Stack } from \"@fluentui/react\";\r\nimport { Light as SyntaxHighlighter } from \"react-syntax-highlighter\";\r\nimport json from \"react-syntax-highlighter/dist/esm/languages/hljs/json\";\r\nimport { a11yLight } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\r\n\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { Thoughts } from \"../../api\";\r\n\r\nSyntaxHighlighter.registerLanguage(\"json\", json);\r\n\r\ninterface Props {\r\n    thoughts: Thoughts[];\r\n}\r\n\r\nexport const ThoughtProcess = ({ thoughts }: Props) => {\r\n    return (\r\n        <ul className={styles.tList}>\r\n            {thoughts.map((t, ind) => {\r\n                return (\r\n                    <li className={styles.tListItem} key={ind}>\r\n                        <div className={styles.tStep}>{t.title}</div>\r\n                        <Stack horizontal tokens={{ childrenGap: 5 }}>\r\n                            {t.props &&\r\n                                (Object.keys(t.props) || []).map((k: any) => (\r\n                                    <span className={styles.tProp}>\r\n                                        {k}: {JSON.stringify(t.props?.[k])}\r\n                                    </span>\r\n                                ))}\r\n                        </Stack>\r\n                        {Array.isArray(t.description) ? (\r\n                            <SyntaxHighlighter language=\"json\" wrapLongLines className={styles.tCodeBlock} style={a11yLight}>\r\n                                {JSON.stringify(t.description, null, 2)}\r\n                            </SyntaxHighlighter>\r\n                        ) : (\r\n                            <div>{t.description}</div>\r\n                        )}\r\n                    </li>\r\n                );\r\n            })}\r\n        </ul>\r\n    );\r\n};\r\n","import { Spinner, SpinnerSize, MessageBar, MessageBarType, Link, IconButton } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport remarkGfm from \"remark-gfm\";\r\n\r\nimport styles from \"./MarkdownViewer.module.css\";\r\n\r\ninterface MarkdownViewerProps {\r\n    src: string;\r\n}\r\n\r\nexport const MarkdownViewer: React.FC<MarkdownViewerProps> = ({ src }) => {\r\n    const [content, setContent] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [error, setError] = useState<Error | null>(null);\r\n    const { t } = useTranslation();\r\n\r\n    /**\r\n     * Anchor links result in HTTP 404 errors as the URL they point to does not exist.\r\n     * This function removes them from the markdown.\r\n     */\r\n    const removeAnchorLinks = (markdown: string) => {\r\n        const ancorLinksRegex = /\\[.*?\\]\\(#.*?\\)/g;\r\n        return markdown.replace(ancorLinksRegex, \"\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchMarkdown = async () => {\r\n            try {\r\n                const response = await fetch(src);\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(\"Failed loading markdown file.\");\r\n                }\r\n\r\n                let markdownText = await response.text();\r\n                markdownText = removeAnchorLinks(markdownText);\r\n                setContent(markdownText);\r\n            } catch (error: any) {\r\n                setError(error);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchMarkdown();\r\n    }, [src]);\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? (\r\n                <div className={`${styles.loading} ${styles.markdownViewer}`}>\r\n                    <Spinner size={SpinnerSize.large} label=\"Loading file\" />\r\n                </div>\r\n            ) : error ? (\r\n                <div className={`${styles.error} ${styles.markdownViewer}`}>\r\n                    <MessageBar messageBarType={MessageBarType.error} isMultiline={false}>\r\n                        {error.message}\r\n                        <Link href={src} download>\r\n                            Download the file\r\n                        </Link>\r\n                    </MessageBar>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <IconButton\r\n                        className={styles.downloadButton}\r\n                        style={{ color: \"black\" }}\r\n                        iconProps={{ iconName: \"Save\" }}\r\n                        title={t(\"tooltips.save\")}\r\n                        ariaLabel={t(\"tooltips.save\")}\r\n                        href={src}\r\n                        download\r\n                    />\r\n                    <ReactMarkdown children={content} remarkPlugins={[remarkGfm]} className={`${styles.markdown} ${styles.markdownViewer}`} />\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { Stack, Pivot, PivotItem } from \"@fluentui/react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./AnalysisPanel.module.css\";\r\n\r\nimport { SupportingContent } from \"../SupportingContent\";\r\nimport { ChatAppResponse } from \"../../api\";\r\nimport { AnalysisPanelTabs } from \"./AnalysisPanelTabs\";\r\nimport { ThoughtProcess } from \"./ThoughtProcess\";\r\nimport { MarkdownViewer } from \"../MarkdownViewer\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { getHeaders } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n    className: string;\r\n    activeTab: AnalysisPanelTabs;\r\n    onActiveTabChanged: (tab: AnalysisPanelTabs) => void;\r\n    activeCitation: string | undefined;\r\n    citationHeight: string;\r\n    answer: ChatAppResponse;\r\n}\r\n\r\nconst pivotItemDisabledStyle = { disabled: true, style: { color: \"grey\" } };\r\n\r\nexport const AnalysisPanel = ({ answer, activeTab, activeCitation, citationHeight, className, onActiveTabChanged }: Props) => {\r\n    const isDisabledThoughtProcessTab: boolean = !answer.context.thoughts;\r\n    const isDisabledSupportingContentTab: boolean = !answer.context.data_points;\r\n    const isDisabledCitationTab: boolean = !activeCitation;\r\n    const [citation, setCitation] = useState(\"\");\r\n    const [wordUrl, setWordUrl] = useState(\"\");\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { t } = useTranslation();\r\n\r\n    const fetchCitation = async () => {\r\n        const token = client ? await getToken(client) : undefined;\r\n        if (activeCitation) {\r\n            // Get hash from the URL as it may contain #page=N\r\n            // which helps browser PDF renderer jump to correct page N\r\n            const originalHash = activeCitation.indexOf(\"#\") ? activeCitation.split(\"#\")[1] : \"\";\r\n            // console.log(originalHash);\r\n            // setWordUrl(originalHash);\r\n            const response = await fetch(activeCitation, {\r\n                method: \"GET\",\r\n                headers: await getHeaders(token)\r\n            });\r\n            console.log(response);\r\n            setWordUrl(response.url);\r\n            const citationContent = await response.blob();\r\n            let citationObjectUrl = URL.createObjectURL(citationContent);\r\n            // Add hash back to the new blob URL\r\n            if (originalHash) {\r\n                citationObjectUrl += \"#\" + originalHash;\r\n            }\r\n            setCitation(citationObjectUrl);\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        fetchCitation();\r\n    }, []);\r\n\r\n    const renderFileViewer = () => {\r\n        if (!activeCitation) {\r\n            return null;\r\n        }\r\n\r\n        const fileExtension = activeCitation.split(\".\").pop()?.toLowerCase();\r\n        // console.log(fileExtension);\r\n        // console.log(citation, activeCitation);\r\n        switch (fileExtension) {\r\n            case \"png\":\r\n                return <img src={citation} className={styles.citationImg} alt=\"Citation Image\" />;\r\n            case \"md\":\r\n                return <MarkdownViewer src={activeCitation} />;\r\n            // case for word document\r\n            case \"docx\":\r\n                return (\r\n                    <iframe title=\"Citation\" src={`https://view.officeapps.live.com/op/view.aspx?src=${wordUrl}`} width=\"100%\" height={citationHeight}>\r\n                        This is an embedded{\" \"}\r\n                        <a target=\"_blank\" href=\"http://office.com\">\r\n                            Microsoft Office\r\n                        </a>{\" \"}\r\n                        document, powered by{\" \"}\r\n                        <a target=\"_blank\" href=\"http://office.com/webapps\">\r\n                            Office Online\r\n                        </a>\r\n                        .\r\n                    </iframe>\r\n                );\r\n            default:\r\n                return <iframe title=\"Citation\" src={citation} width=\"100%\" height={citationHeight} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Pivot\r\n            className={className}\r\n            selectedKey={activeTab}\r\n            onLinkClick={pivotItem => pivotItem && onActiveTabChanged(pivotItem.props.itemKey! as AnalysisPanelTabs)}\r\n        >\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.ThoughtProcessTab}\r\n                headerText={t(\"headerTexts.thoughtProcess\")}\r\n                headerButtonProps={isDisabledThoughtProcessTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <ThoughtProcess thoughts={answer.context.thoughts || []} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.SupportingContentTab}\r\n                headerText={t(\"headerTexts.supportingContent\")}\r\n                headerButtonProps={isDisabledSupportingContentTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                <SupportingContent supportingContent={answer.context.data_points} />\r\n            </PivotItem>\r\n            <PivotItem\r\n                itemKey={AnalysisPanelTabs.CitationTab}\r\n                headerText={t(\"headerTexts.citation\")}\r\n                headerButtonProps={isDisabledCitationTab ? pivotItemDisabledStyle : undefined}\r\n            >\r\n                {renderFileViewer()}\r\n            </PivotItem>\r\n        </Pivot>\r\n    );\r\n};\r\n","import { useState, useCallback } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./HistoryItem.module.css\";\r\nimport { DefaultButton } from \"@fluentui/react\";\r\nimport { Delete24Regular } from \"@fluentui/react-icons\";\r\n\r\nexport interface HistoryData {\r\n    id: string;\r\n    title: string;\r\n    timestamp: number;\r\n}\r\n\r\ninterface HistoryItemProps {\r\n    item: HistoryData;\r\n    onSelect: (id: string) => void;\r\n    onDelete: (id: string) => void;\r\n}\r\n\r\nexport function HistoryItem({ item, onSelect, onDelete }: HistoryItemProps) {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    const handleDelete = useCallback(() => {\r\n        setIsModalOpen(false);\r\n        onDelete(item.id);\r\n    }, [item.id, onDelete]);\r\n\r\n    return (\r\n        <div className={styles.historyItem}>\r\n            <button onClick={() => onSelect(item.id)} className={styles.historyItemButton} aria-label={`Select ${item.title}`}>\r\n                <div className={styles.historyItemTitle}>{item.title}</div>\r\n            </button>\r\n            <button onClick={() => setIsModalOpen(true)} className={styles.deleteButton} aria-label=\"delete this chat history\">\r\n                <Delete24Regular className={styles.deleteIcon} />\r\n            </button>\r\n            <DeleteHistoryModal isOpen={isModalOpen} onClose={() => setIsModalOpen(false)} onConfirm={handleDelete} />\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction DeleteHistoryModal({ isOpen, onClose, onConfirm }: { isOpen: boolean; onClose: () => void; onConfirm: () => void }) {\r\n    if (!isOpen) return null;\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className={styles.modalOverlay}>\r\n            <div className={styles.modalContent}>\r\n                <h2 className={styles.modalTitle}>{t(\"history.deleteModalTitle\")}</h2>\r\n                <p className={styles.modalDescription}>{t(\"history.deleteModalDescription\")}</p>\r\n                <div className={styles.modalActions}>\r\n                    <DefaultButton onClick={onClose} className={styles.modalCancelButton}>\r\n                        {t(\"history.cancelLabel\")}\r\n                    </DefaultButton>\r\n                    <DefaultButton onClick={onConfirm} className={styles.modalConfirmButton}>\r\n                        {t(\"history.deleteLabel\")}\r\n                    </DefaultButton>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import { ChatAppResponse } from \"../../api\";\r\n\r\nexport type HistoryMetaData = { id: string; title: string; timestamp: number };\r\nexport type Answers = [user: string, response: ChatAppResponse][];\r\n\r\nexport const enum HistoryProviderOptions {\r\n    None = \"none\",\r\n    IndexedDB = \"indexedDB\"\r\n}\r\n\r\nexport interface IHistoryProvider {\r\n    getProviderName(): HistoryProviderOptions;\r\n    resetContinuationToken(): void;\r\n    getNextItems(count: number): Promise<HistoryMetaData[]>;\r\n    addItem(id: string, answers: Answers): Promise<void>;\r\n    getItem(id: string): Promise<Answers | null>;\r\n    deleteItem(id: string): Promise<void>;\r\n}\r\n","import { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\r\n\r\nexport class NoneProvider implements IHistoryProvider {\r\n    getProviderName = () => HistoryProviderOptions.None;\r\n    resetContinuationToken(): void {\r\n        return;\r\n    }\r\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\r\n        return [];\r\n    }\r\n    async addItem(id: string, answers: Answers): Promise<void> {\r\n        return;\r\n    }\r\n    async getItem(id: string): Promise<null> {\r\n        return null;\r\n    }\r\n    async deleteItem(id: string): Promise<void> {\r\n        return;\r\n    }\r\n}\r\n","import { IDBPDatabase, openDB } from \"idb\";\r\nimport { IHistoryProvider, Answers, HistoryProviderOptions, HistoryMetaData } from \"./IProvider\";\r\n\r\nexport class IndexedDBProvider implements IHistoryProvider {\r\n    getProviderName = () => HistoryProviderOptions.IndexedDB;\r\n\r\n    private dbName: string;\r\n    private storeName: string;\r\n    private dbPromise: Promise<IDBPDatabase> | null = null;\r\n    private cursorKey: IDBValidKey | undefined;\r\n    private isCusorEnd: boolean = false;\r\n\r\n    constructor(dbName: string, storeName: string) {\r\n        this.dbName = dbName;\r\n        this.storeName = storeName;\r\n        this.cursorKey = undefined;\r\n        this.isCusorEnd = false;\r\n    }\r\n\r\n    private async init() {\r\n        const storeName = this.storeName;\r\n        if (!this.dbPromise) {\r\n            this.dbPromise = openDB(this.dbName, 1, {\r\n                upgrade(db) {\r\n                    if (!db.objectStoreNames.contains(storeName)) {\r\n                        const store = db.createObjectStore(storeName, { keyPath: \"id\" });\r\n                        store.createIndex(\"timestamp\", \"timestamp\");\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        return this.dbPromise;\r\n    }\r\n\r\n    resetContinuationToken() {\r\n        this.cursorKey = undefined;\r\n        this.isCusorEnd = false;\r\n    }\r\n\r\n    async getNextItems(count: number): Promise<HistoryMetaData[]> {\r\n        const db = await this.init();\r\n        const tx = db.transaction(this.storeName, \"readonly\");\r\n        const store = tx.objectStore(this.storeName);\r\n        const index = store.index(\"timestamp\");\r\n\r\n        // return empty array if cursor is already at the end\r\n        if (this.isCusorEnd) {\r\n            return [];\r\n        }\r\n\r\n        // set cursor to the last key\r\n        let cursor = this.cursorKey ? await index.openCursor(IDBKeyRange.upperBound(this.cursorKey), \"prev\") : await index.openCursor(null, \"prev\");\r\n\r\n        // return empty array means no more history or no data. set isCursorEnd to true and return empty array\r\n        if (!cursor) {\r\n            this.isCusorEnd = true;\r\n            return [];\r\n        }\r\n\r\n        const loadedItems: { id: string; title: string; timestamp: number; answers: Answers }[] = [];\r\n        for (let i = 0; i < count && cursor; i++) {\r\n            loadedItems.push(cursor.value);\r\n            cursor = await cursor.continue();\r\n        }\r\n\r\n        // set isCursorEnd to true if cursor is null\r\n        if (!cursor) {\r\n            this.isCusorEnd = true;\r\n        }\r\n\r\n        // update cursorKey\r\n        this.cursorKey = cursor?.key;\r\n\r\n        return loadedItems;\r\n    }\r\n\r\n    async addItem(id: string, answers: Answers): Promise<void> {\r\n        const timestamp = new Date().getTime();\r\n        const db = await this.init(); // 自動的に初期化\r\n        const tx = db.transaction(this.storeName, \"readwrite\");\r\n        const current = await tx.objectStore(this.storeName).get(id);\r\n        if (current) {\r\n            await tx.objectStore(this.storeName).put({ ...current, id, timestamp, answers });\r\n        } else {\r\n            const title = answers[0][0].length > 50 ? answers[0][0].substring(0, 50) + \"...\" : answers[0][0];\r\n            await tx.objectStore(this.storeName).add({ id, title, timestamp, answers });\r\n        }\r\n        await tx.done;\r\n        return;\r\n    }\r\n\r\n    async getItem(id: string): Promise<Answers | null> {\r\n        const db = await this.init();\r\n        const tx = db.transaction(this.storeName, \"readonly\");\r\n        const item = await tx.objectStore(this.storeName).get(id);\r\n        return item ? item.answers : null;\r\n    }\r\n\r\n    async deleteItem(id: string): Promise<void> {\r\n        const db = await this.init();\r\n        await db.delete(this.storeName, id);\r\n        return;\r\n    }\r\n}\r\n","import { useMemo } from \"react\";\r\nimport { IHistoryProvider, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\r\nimport { NoneProvider } from \"../HistoryProviders/None\";\r\nimport { IndexedDBProvider } from \"../HistoryProviders/IndexedDB\";\r\n\r\nexport const useHistoryManager = (provider: HistoryProviderOptions): IHistoryProvider => {\r\n    const providerInstance = useMemo(() => {\r\n        switch (provider) {\r\n            case HistoryProviderOptions.IndexedDB:\r\n                return new IndexedDBProvider(\"chat-database\", \"chat-history\");\r\n            case HistoryProviderOptions.None:\r\n            default:\r\n                return new NoneProvider();\r\n        }\r\n    }, [provider]);\r\n\r\n    return providerInstance;\r\n};\r\n","import { Panel, PanelType } from \"@fluentui/react\";\r\nimport { useEffect, useMemo, useRef, useState } from \"react\";\r\nimport { HistoryData, HistoryItem } from \"../HistoryItem\";\r\nimport { Answers, HistoryProviderOptions } from \"../HistoryProviders/IProvider\";\r\nimport { useHistoryManager, HistoryMetaData } from \"../HistoryProviders\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./HistoryPanel.module.css\";\r\n\r\nconst HISTORY_COUNT_PER_LOAD = 20;\r\n\r\nexport const HistoryPanel = ({\r\n    provider,\r\n    isOpen,\r\n    notify,\r\n    onClose,\r\n    onChatSelected\r\n}: {\r\n    provider: HistoryProviderOptions;\r\n    isOpen: boolean;\r\n    notify: boolean;\r\n    onClose: () => void;\r\n    onChatSelected: (answers: Answers) => void;\r\n}) => {\r\n    const historyManager = useHistoryManager(provider);\r\n    const [history, setHistory] = useState<HistoryMetaData[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [hasMoreHistory, setHasMoreHistory] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!isOpen) return;\r\n        if (notify) {\r\n            setHistory([]);\r\n            historyManager.resetContinuationToken();\r\n            setHasMoreHistory(true);\r\n        }\r\n    }, [isOpen, notify]);\r\n\r\n    const loadMoreHistory = async () => {\r\n        setIsLoading(() => true);\r\n        const items = await historyManager.getNextItems(HISTORY_COUNT_PER_LOAD);\r\n        if (items.length === 0) {\r\n            setHasMoreHistory(false);\r\n        }\r\n        setHistory(prevHistory => [...prevHistory, ...items]);\r\n        setIsLoading(() => false);\r\n    };\r\n\r\n    const handleSelect = async (id: string) => {\r\n        const item = await historyManager.getItem(id);\r\n        if (item) {\r\n            onChatSelected(item);\r\n        }\r\n    };\r\n\r\n    const handleDelete = async (id: string) => {\r\n        await historyManager.deleteItem(id);\r\n        setHistory(prevHistory => prevHistory.filter(item => item.id !== id));\r\n    };\r\n\r\n    const groupedHistory = useMemo(() => groupHistory(history), [history]);\r\n\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Panel\r\n            type={PanelType.customNear}\r\n            style={{ padding: \"0px\" }}\r\n            headerText={t(\"history.chatHistory\")}\r\n            customWidth=\"300px\"\r\n            isBlocking={false}\r\n            isOpen={isOpen}\r\n            onDismiss={() => onClose()}\r\n            onDismissed={() => {\r\n                setHistory([]);\r\n                setHasMoreHistory(true);\r\n                historyManager.resetContinuationToken();\r\n            }}\r\n        >\r\n            <div>\r\n                {Object.entries(groupedHistory).map(([group, items]) => (\r\n                    <div key={group} className={styles.group}>\r\n                        <p className={styles.groupLabel}>{t(group)}</p>\r\n                        {items.map(item => (\r\n                            <HistoryItem key={item.id} item={item} onSelect={handleSelect} onDelete={handleDelete} />\r\n                        ))}\r\n                    </div>\r\n                ))}\r\n                {history.length === 0 && <p>{t(\"history.noHistory\")}</p>}\r\n                {hasMoreHistory && !isLoading && <InfiniteLoadingButton func={loadMoreHistory} />}\r\n            </div>\r\n        </Panel>\r\n    );\r\n};\r\n\r\nfunction groupHistory(history: HistoryData[]) {\r\n    const today = new Date();\r\n    today.setHours(0, 0, 0, 0);\r\n    const yesterday = new Date(today);\r\n    yesterday.setDate(yesterday.getDate() - 1);\r\n    const lastWeek = new Date(today);\r\n    lastWeek.setDate(lastWeek.getDate() - 7);\r\n    const lastMonth = new Date(today);\r\n    lastMonth.setDate(lastMonth.getDate() - 30);\r\n\r\n    return history.reduce(\r\n        (groups, item) => {\r\n            const itemDate = new Date(item.timestamp);\r\n            let group;\r\n\r\n            if (itemDate >= today) {\r\n                group = \"history.today\";\r\n            } else if (itemDate >= yesterday) {\r\n                group = \"history.yesterday\";\r\n            } else if (itemDate >= lastWeek) {\r\n                group = \"history.last7days\";\r\n            } else if (itemDate >= lastMonth) {\r\n                group = \"history.last30days\";\r\n            } else {\r\n                group = itemDate.toLocaleDateString(undefined, { year: \"numeric\", month: \"long\" });\r\n            }\r\n\r\n            if (!groups[group]) {\r\n                groups[group] = [];\r\n            }\r\n            groups[group].push(item);\r\n            return groups;\r\n        },\r\n        {} as Record<string, HistoryData[]>\r\n    );\r\n}\r\n\r\nconst InfiniteLoadingButton = ({ func }: { func: () => void }) => {\r\n    const buttonRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(\r\n            entries => {\r\n                entries.forEach(entry => {\r\n                    if (entry.isIntersecting) {\r\n                        if (buttonRef.current) {\r\n                            func();\r\n                        }\r\n                    }\r\n                });\r\n            },\r\n            {\r\n                root: null,\r\n                threshold: 0\r\n            }\r\n        );\r\n\r\n        if (buttonRef.current) {\r\n            observer.observe(buttonRef.current);\r\n        }\r\n\r\n        return () => {\r\n            if (buttonRef.current) {\r\n                observer.unobserve(buttonRef.current);\r\n            }\r\n        };\r\n    }, []);\r\n\r\n    return <button ref={buttonRef} onClick={func} />;\r\n};\r\n","import { Settings24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./SettingsButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n}\r\n\r\nexport const SettingsButton = ({ className, onClick }: Props) => {\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Settings24Regular />} onClick={onClick}>\r\n                {t(\"developerSettings\")}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import { Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./ClearChatButton.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    onClick: () => void;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const ClearChatButton = ({ className, disabled, onClick }: Props) => {\r\n    const { t, i18n } = useTranslation();\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <Button icon={<Delete24Regular />} disabled={disabled} onClick={onClick}>\r\n                {t(\"clearChat\")}\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState, ChangeEvent } from \"react\";\r\nimport { Callout, Label, Text } from \"@fluentui/react\";\r\nimport { Button } from \"@fluentui/react-components\";\r\nimport { Add24Regular, Delete24Regular } from \"@fluentui/react-icons\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport { SimpleAPIResponse, uploadFileApi, deleteUploadedFileApi, listUploadedFilesApi } from \"../../api\";\r\nimport { useLogin, getToken } from \"../../authConfig\";\r\nimport styles from \"./UploadFile.module.css\";\r\n\r\ninterface Props {\r\n    className?: string;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const UploadFile: React.FC<Props> = ({ className, disabled }: Props) => {\r\n    // State variables to manage the component behavior\r\n    const [isCalloutVisible, setIsCalloutVisible] = useState<boolean>(false);\r\n    const [isUploading, setIsUploading] = useState<boolean>(false);\r\n    const [isLoading, setIsLoading] = useState<boolean>(true);\r\n    const [deletionStatus, setDeletionStatus] = useState<{ [filename: string]: \"pending\" | \"error\" | \"success\" }>({});\r\n    const [uploadedFile, setUploadedFile] = useState<SimpleAPIResponse>();\r\n    const [uploadedFileError, setUploadedFileError] = useState<string>();\r\n    const [uploadedFiles, setUploadedFiles] = useState<string[]>([]);\r\n    const { t } = useTranslation();\r\n\r\n    if (!useLogin) {\r\n        throw new Error(\"The UploadFile component requires useLogin to be true\");\r\n    }\r\n\r\n    const client = useMsal().instance;\r\n\r\n    // Handler for the \"Manage file uploads\" button\r\n    const handleButtonClick = async () => {\r\n        setIsCalloutVisible(!isCalloutVisible); // Toggle the Callout visibility\r\n\r\n        // Update uploaded files by calling the API\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            console.error(error);\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const listUploadedFiles = async (idToken: string) => {\r\n        listUploadedFilesApi(idToken).then(files => {\r\n            setIsLoading(false);\r\n            setDeletionStatus({});\r\n            setUploadedFiles(files);\r\n        });\r\n    };\r\n\r\n    const handleRemoveFile = async (filename: string) => {\r\n        setDeletionStatus({ ...deletionStatus, [filename]: \"pending\" });\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n\r\n            await deleteUploadedFileApi(filename, idToken);\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"success\" });\r\n            listUploadedFiles(idToken);\r\n        } catch (error) {\r\n            setDeletionStatus({ ...deletionStatus, [filename]: \"error\" });\r\n            console.error(error);\r\n        }\r\n    };\r\n\r\n    // Handler for the form submission (file upload)\r\n    const handleUploadFile = async (e: ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault();\r\n        if (!e.target.files || e.target.files.length === 0) {\r\n            return;\r\n        }\r\n        setIsUploading(true); // Start the loading state\r\n        const file: File = e.target.files[0];\r\n        const formData = new FormData();\r\n        formData.append(\"file\", file);\r\n\r\n        try {\r\n            const idToken = await getToken(client);\r\n\r\n            console.log(\"Token for upload:\", idToken);\r\n            console.log(\"Uploading file:\", file.name);\r\n            if (!idToken) {\r\n                throw new Error(\"No authentication token available\");\r\n            }\r\n            const response: SimpleAPIResponse = await uploadFileApi(formData, idToken);\r\n            console.log(\"Upload response:\", response);\r\n            setUploadedFile(response);\r\n            setIsUploading(false);\r\n            setUploadedFileError(undefined);\r\n            listUploadedFiles(idToken);\r\n        } catch (error: any) {\r\n            console.error(\"File upload failed:\", error);\r\n            setIsUploading(false);\r\n            setUploadedFileError(error.message || t(\"upload.uploadedFileError\"));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className={`${styles.container} ${className ?? \"\"}`}>\r\n            <div>\r\n                <Button id=\"calloutButton\" icon={<Add24Regular />} disabled={disabled} onClick={handleButtonClick}>\r\n                    {t(\"upload.manageFileUploads\")}\r\n                </Button>\r\n\r\n                {isCalloutVisible && (\r\n                    <Callout\r\n                        role=\"dialog\"\r\n                        gapSpace={0}\r\n                        className={styles.callout}\r\n                        target=\"#calloutButton\"\r\n                        onDismiss={() => setIsCalloutVisible(false)}\r\n                        setInitialFocus\r\n                    >\r\n                        <form encType=\"multipart/form-data\">\r\n                            <div>\r\n                                <Label>{t(\"upload.fileLabel\")}</Label>\r\n                                <input\r\n                                    accept=\".txt, .md, .json, .png, .jpg, .jpeg, .bmp, .heic, .tiff, .pdf, .docx, .xlsx, .pptx, .html\"\r\n                                    className={styles.chooseFiles}\r\n                                    type=\"file\"\r\n                                    onChange={handleUploadFile}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n\r\n                        {/* Show a loading message while files are being uploaded */}\r\n                        {isUploading && <Text>{t(\"upload.uploadingFiles\")}</Text>}\r\n                        {!isUploading && uploadedFileError && <Text>{uploadedFileError}</Text>}\r\n                        {!isUploading && uploadedFile && <Text>{uploadedFile.message}</Text>}\r\n\r\n                        {/* Display the list of already uploaded */}\r\n                        <h3>{t(\"upload.uploadedFilesLabel\")}</h3>\r\n\r\n                        {isLoading && <Text>{t(\"upload.loading\")}</Text>}\r\n                        {!isLoading && uploadedFiles.length === 0 && <Text>{t(\"upload.noFilesUploaded\")}</Text>}\r\n                        {uploadedFiles.map((filename, index) => {\r\n                            return (\r\n                                <div key={index} className={styles.list}>\r\n                                    <div className={styles.item}>{filename}</div>\r\n                                    {/* Button to remove a file from the list */}\r\n                                    <Button\r\n                                        icon={<Delete24Regular />}\r\n                                        onClick={() => handleRemoveFile(filename)}\r\n                                        disabled={deletionStatus[filename] === \"pending\" || deletionStatus[filename] === \"success\"}\r\n                                    >\r\n                                        {!deletionStatus[filename] && t(\"upload.deleteFile\")}\r\n                                        {deletionStatus[filename] == \"pending\" && t(\"upload.deletingFile\")}\r\n                                        {deletionStatus[filename] == \"error\" && t(\"upload.errorDeleting\")}\r\n                                        {deletionStatus[filename] == \"success\" && t(\"upload.fileDeleted\")}\r\n                                    </Button>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </Callout>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};","import { useEffect, useState } from \"react\";\r\nimport { Stack, IDropdownOption, Dropdown, IDropdownProps } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./VectorSettings.module.css\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { RetrievalMode, VectorFieldOptions } from \"../../api\";\r\n\r\ninterface Props {\r\n    showImageOptions?: boolean;\r\n    defaultRetrievalMode: RetrievalMode;\r\n    updateRetrievalMode: (retrievalMode: RetrievalMode) => void;\r\n    updateVectorFields: (options: VectorFieldOptions[]) => void;\r\n}\r\n\r\nexport const VectorSettings = ({ updateRetrievalMode, updateVectorFields, showImageOptions, defaultRetrievalMode }: Props) => {\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<VectorFieldOptions>(VectorFieldOptions.Both);\r\n\r\n    const onRetrievalModeChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n        updateRetrievalMode(option?.data || RetrievalMode.Hybrid);\r\n    };\r\n\r\n    const onVectorFieldsChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<RetrievalMode> | undefined) => {\r\n        setVectorFieldOption(option?.key as VectorFieldOptions);\r\n        updateVectorFields([option?.key as VectorFieldOptions]);\r\n    };\r\n\r\n    useEffect(() => {\r\n        showImageOptions\r\n            ? updateVectorFields([VectorFieldOptions.Embedding, VectorFieldOptions.ImageEmbedding])\r\n            : updateVectorFields([VectorFieldOptions.Embedding]);\r\n    }, [showImageOptions]);\r\n\r\n    const retrievalModeId = useId(\"retrievalMode\");\r\n    const retrievalModeFieldId = useId(\"retrievalModeField\");\r\n    const vectorFieldsId = useId(\"vectorFields\");\r\n    const vectorFieldsFieldId = useId(\"vectorFieldsField\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Dropdown\r\n                id={retrievalModeFieldId}\r\n                label={t(\"labels.retrievalMode.label\")}\r\n                selectedKey={defaultRetrievalMode.toString()}\r\n                options={[\r\n                    {\r\n                        key: \"hybrid\",\r\n                        text: t(\"labels.retrievalMode.options.hybrid\"),\r\n                        selected: retrievalMode == RetrievalMode.Hybrid,\r\n                        data: RetrievalMode.Hybrid\r\n                    },\r\n                    {\r\n                        key: \"vectors\",\r\n                        text: t(\"labels.retrievalMode.options.vectors\"),\r\n                        selected: retrievalMode == RetrievalMode.Vectors,\r\n                        data: RetrievalMode.Vectors\r\n                    },\r\n                    { key: \"text\", text: t(\"labels.retrievalMode.options.texts\"), selected: retrievalMode == RetrievalMode.Text, data: RetrievalMode.Text }\r\n                ]}\r\n                required\r\n                onChange={onRetrievalModeChange}\r\n                aria-labelledby={retrievalModeId}\r\n                onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                    <HelpCallout labelId={retrievalModeId} fieldId={retrievalModeFieldId} helpText={t(\"helpTexts.retrievalMode\")} label={props?.label} />\r\n                )}\r\n            />\r\n\r\n            {showImageOptions && [RetrievalMode.Vectors, RetrievalMode.Hybrid].includes(retrievalMode) && (\r\n                <Dropdown\r\n                    id={vectorFieldsFieldId}\r\n                    label={t(\"labels.vector.label\")}\r\n                    options={[\r\n                        {\r\n                            key: VectorFieldOptions.Embedding,\r\n                            text: t(\"labels.vector.options.embedding\"),\r\n                            selected: vectorFieldOption === VectorFieldOptions.Embedding\r\n                        },\r\n                        {\r\n                            key: VectorFieldOptions.ImageEmbedding,\r\n                            text: t(\"labels.vector.options.imageEmbedding\"),\r\n                            selected: vectorFieldOption === VectorFieldOptions.ImageEmbedding\r\n                        },\r\n                        { key: VectorFieldOptions.Both, text: t(\"labels.vector.options.both\"), selected: vectorFieldOption === VectorFieldOptions.Both }\r\n                    ]}\r\n                    onChange={onVectorFieldsChange}\r\n                    aria-labelledby={vectorFieldsId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={vectorFieldsId} fieldId={vectorFieldsFieldId} helpText={t(\"helpTexts.vectorFields\")} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { Label } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport {\r\n    DataGridBody,\r\n    DataGridRow,\r\n    DataGrid,\r\n    DataGridHeader,\r\n    DataGridHeaderCell,\r\n    DataGridCell,\r\n    createTableColumn,\r\n    TableColumnDefinition\r\n} from \"@fluentui/react-table\";\r\nimport { getTokenClaims } from \"../../authConfig\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\ntype Claim = {\r\n    name: string;\r\n    value: string;\r\n};\r\n\r\nexport const TokenClaimsDisplay = () => {\r\n    const { instance } = useMsal();\r\n    const activeAccount = instance.getActiveAccount();\r\n    const [claims, setClaims] = useState<Record<string, unknown> | undefined>(undefined);\r\n\r\n    useEffect(() => {\r\n        const fetchClaims = async () => {\r\n            setClaims(await getTokenClaims(instance));\r\n        };\r\n\r\n        fetchClaims();\r\n    }, []);\r\n\r\n    const ToString = (a: string | any) => {\r\n        if (typeof a === \"string\") {\r\n            return a;\r\n        } else {\r\n            return JSON.stringify(a);\r\n        }\r\n    };\r\n\r\n    let createClaims = (o: Record<string, unknown> | undefined) => {\r\n        return Object.keys(o ?? {}).map((key: string) => {\r\n            let originalKey = key;\r\n            try {\r\n                // Some claim names may be a URL to a full schema, just use the last part of the URL in this case\r\n                const url = new URL(key);\r\n                const parts = url.pathname.split(\"/\");\r\n                key = parts[parts.length - 1];\r\n            } catch (error) {\r\n                // Do not parse key if it's not a URL\r\n            }\r\n            return { name: key, value: ToString((o ?? {})[originalKey]) };\r\n        });\r\n    };\r\n    const items: Claim[] = createClaims(claims);\r\n\r\n    const columns: TableColumnDefinition<Claim>[] = [\r\n        createTableColumn<Claim>({\r\n            columnId: \"name\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.name.localeCompare(b.name);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Name\";\r\n            },\r\n            renderCell: item => {\r\n                return item.name;\r\n            }\r\n        }),\r\n        createTableColumn<Claim>({\r\n            columnId: \"value\",\r\n            compare: (a: Claim, b: Claim) => {\r\n                return a.value.localeCompare(b.value);\r\n            },\r\n            renderHeaderCell: () => {\r\n                return \"Value\";\r\n            },\r\n            renderCell: item => {\r\n                return item.value;\r\n            }\r\n        })\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Label>ID Token Claims</Label>\r\n            <DataGrid items={items} columns={columns} sortable getRowId={item => item.name}>\r\n                <DataGridHeader>\r\n                    <DataGridRow>{({ renderHeaderCell }) => <DataGridHeaderCell>{renderHeaderCell()}</DataGridHeaderCell>}</DataGridRow>\r\n                </DataGridHeader>\r\n                <DataGridBody<Claim>>\r\n                    {({ item, rowId }) => <DataGridRow<Claim> key={rowId}>{({ renderCell }) => <DataGridCell>{renderCell(item)}</DataGridCell>}</DataGridRow>}\r\n                </DataGridBody>\r\n            </DataGrid>\r\n        </div>\r\n    );\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { Stack, Checkbox, ICheckboxProps, IDropdownOption, IDropdownProps, Dropdown } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./GPT4VSettings.module.css\";\r\nimport { GPT4VInput } from \"../../api\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\n\r\ninterface Props {\r\n    gpt4vInputs: GPT4VInput;\r\n    isUseGPT4V: boolean;\r\n    updateGPT4VInputs: (input: GPT4VInput) => void;\r\n    updateUseGPT4V: (useGPT4V: boolean) => void;\r\n}\r\n\r\nexport const GPT4VSettings = ({ updateGPT4VInputs, updateUseGPT4V, isUseGPT4V, gpt4vInputs }: Props) => {\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(isUseGPT4V);\r\n    const [vectorFieldOption, setVectorFieldOption] = useState<GPT4VInput>(gpt4vInputs || GPT4VInput.TextAndImages);\r\n\r\n    const onuseGPT4V = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        updateUseGPT4V(!!checked);\r\n        setUseGPT4V(!!checked);\r\n    };\r\n\r\n    const onSetGPT4VInput = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<GPT4VInput> | undefined) => {\r\n        if (option) {\r\n            const data = option.key as GPT4VInput;\r\n            updateGPT4VInputs(data || GPT4VInput.TextAndImages);\r\n            data && setVectorFieldOption(data);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        useGPT4V && updateGPT4VInputs(GPT4VInput.TextAndImages);\r\n    }, [useGPT4V]);\r\n\r\n    const useGPT4VId = useId(\"useGPT4V\");\r\n    const useGPT4VFieldId = useId(\"useGPT4VField\");\r\n    const gpt4VInputId = useId(\"gpt4VInput\");\r\n    const gpt4VInputFieldId = useId(\"gpt4VInputField\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <Stack className={styles.container} tokens={{ childrenGap: 10 }}>\r\n            <Checkbox\r\n                id={useGPT4VFieldId}\r\n                checked={useGPT4V}\r\n                label={t(\"labels.useGPT4V\")}\r\n                onChange={onuseGPT4V}\r\n                aria-labelledby={useGPT4VId}\r\n                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                    <HelpCallout labelId={useGPT4VId} fieldId={useGPT4VFieldId} helpText={t(\"helpTexts.useGPT4Vision\")} label={props?.label} />\r\n                )}\r\n            />\r\n            {useGPT4V && (\r\n                <Dropdown\r\n                    id={gpt4VInputFieldId}\r\n                    selectedKey={vectorFieldOption}\r\n                    label={t(\"labels.gpt4VInput.label\")}\r\n                    options={[\r\n                        {\r\n                            key: GPT4VInput.TextAndImages,\r\n                            text: t(\"labels.gpt4VInput.options.textAndImages\")\r\n                        },\r\n                        { text: t(\"labels.gpt4VInput.options.images\"), key: GPT4VInput.Images },\r\n                        { text: t(\"labels.gpt4VInput.options.texts\"), key: GPT4VInput.Texts }\r\n                    ]}\r\n                    required\r\n                    onChange={onSetGPT4VInput}\r\n                    aria-labelledby={gpt4VInputId}\r\n                    onRenderLabel={(props: IDropdownProps | undefined) => (\r\n                        <HelpCallout labelId={gpt4VInputId} fieldId={gpt4VInputFieldId} helpText={t(\"helpTexts.gpt4VisionInputs\")} label={props?.label} />\r\n                    )}\r\n                />\r\n            )}\r\n        </Stack>\r\n    );\r\n};\r\n","import { useTranslation } from \"react-i18next\";\r\nimport { LocalLanguage24Regular } from \"@fluentui/react-icons\";\r\nimport { IDropdownOption, Dropdown } from \"@fluentui/react\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\n\r\nimport { supportedLngs } from \"./config\";\r\nimport styles from \"./LanguagePicker.module.css\";\r\n\r\ninterface Props {\r\n    onLanguageChange: (language: string) => void;\r\n}\r\n\r\nexport const LanguagePicker = ({ onLanguageChange }: Props) => {\r\n    const { i18n } = useTranslation();\r\n\r\n    const handleLanguageChange = (_ev: React.FormEvent<HTMLDivElement>, option?: IDropdownOption<string> | undefined) => {\r\n        onLanguageChange(option?.data || i18n.language);\r\n    };\r\n    const languagePickerId = useId(\"languagePicker\");\r\n    const { t } = useTranslation();\r\n\r\n    return (\r\n        <div className={styles.languagePicker}>\r\n            <LocalLanguage24Regular className={styles.languagePickerIcon} />\r\n            <Dropdown\r\n                id={languagePickerId}\r\n                selectedKey={i18n.language}\r\n                options={Object.entries(supportedLngs).map(([code, details]) => ({\r\n                    key: code,\r\n                    text: details.name,\r\n                    selected: code === i18n.language,\r\n                    data: code\r\n                }))}\r\n                onChange={handleLanguageChange}\r\n                ariaLabel={t(\"labels.languagePicker\")}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n","import { useRef, useState, useEffect, useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Helmet } from \"react-helmet-async\";\r\nimport { Checkbox, Panel, DefaultButton, TextField, ITextFieldProps, ICheckboxProps } from \"@fluentui/react\";\r\nimport { SparkleFilled } from \"@fluentui/react-icons\";\r\nimport { useId } from \"@fluentui/react-hooks\";\r\nimport readNDJSONStream from \"ndjson-readablestream\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"D:/azure/app/frontend/src/pages/ask/braein.png\";\r\nimport { ThemeProvider, createTheme } from \"@fluentui/react\";\r\nimport { Dropdown, IDropdownOption } from \"@fluentui/react\";\r\nimport styles from \"./Chat.module.css\";\r\nimport LeftSidebar from \"../leftsidebar/LeftSidebar\";\r\nimport help from \"../Help/help\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faAngleDoubleRight, faAngleDoubleLeft } from \"@fortawesome/free-solid-svg-icons\";\r\nimport {\r\n    chatApi,\r\n    configApi,\r\n    RetrievalMode,\r\n    ChatAppResponse,\r\n    ChatAppResponseOrError,\r\n    ChatAppRequest,\r\n    ResponseMessage,\r\n    VectorFieldOptions,\r\n    GPT4VInput,\r\n    SpeechConfig\r\n} from \"../../api\";\r\nimport { Answer, AnswerError, AnswerLoading } from \"../../components/Answer\";\r\nimport { QuestionInput } from \"../../components/QuestionInput\";\r\nimport { ExampleList } from \"../../components/Example\";\r\nimport { UserChatMessage } from \"../../components/UserChatMessage\";\r\nimport { HelpCallout } from \"../../components/HelpCallout\";\r\nimport { AnalysisPanel, AnalysisPanelTabs } from \"../../components/AnalysisPanel\";\r\nimport { HistoryPanel } from \"../../components/HistoryPanel\";\r\nimport { HistoryProviderOptions, useHistoryManager } from \"../../components/HistoryProviders\";\r\nimport { HistoryButton } from \"../../components/HistoryButton\";\r\nimport { SettingsButton } from \"../../components/SettingsButton\";\r\nimport { ClearChatButton } from \"../../components/ClearChatButton\";\r\nimport { UploadFile } from \"../../components/UploadFile\";\r\nimport { useLogin, getToken, requireAccessControl } from \"../../authConfig\";\r\nimport { VectorSettings } from \"../../components/VectorSettings\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { TokenClaimsDisplay } from \"../../components/TokenClaimsDisplay\";\r\nimport { GPT4VSettings } from \"../../components/GPT4VSettings\";\r\nimport { LoginContext } from \"../../loginContext\";\r\nimport { LanguagePicker } from \"../../i18n/LanguagePicker\";\r\nimport FileUpload from \"../../components/FileUpload/FileUpload\";\r\n// Define the dark theme\r\nconst darkTheme = createTheme({\r\n    palette: {\r\n        themePrimary: \"#0078d4\",\r\n        themeLighterAlt: \"#00060a\",\r\n        themeLighter: \"#001828\",\r\n        themeLight: \"#002d4e\",\r\n        themeTertiary: \"#005a9d\",\r\n        themeSecondary: \"#0086eb\",\r\n        themeDarkAlt: \"#2294ed\",\r\n        themeDark: \"#3fa5ef\",\r\n        themeDarker: \"#70c0f3\",\r\n        neutralLighterAlt: \"#2a2a2a\",\r\n        neutralLighter: \"#323232\",\r\n        neutralLight: \"#3c3c3c\",\r\n        neutralQuaternaryAlt: \"#444444\",\r\n        neutralQuaternary: \"#4a4a4a\",\r\n        neutralTertiaryAlt: \"#6f6f6f\",\r\n        neutralTertiary: \"#c8c8c8\",\r\n        neutralSecondary: \"#d0d0d0\",\r\n        neutralPrimaryAlt: \"#dadada\",\r\n        neutralPrimary: \"#ffffff\",\r\n        neutralDark: \"#f4f4f4\",\r\n        black: \"#f8f8f8\",\r\n        white: \"#1c1c1c\"\r\n    }\r\n});\r\n\r\nconst Chat = () => {\r\n    const [isSidebarVisible, setIsSidebarVisible] = useState(true);\r\n    const [isConfigPanelOpen, setIsConfigPanelOpen] = useState(false);\r\n    const [isHistoryPanelOpen, setIsHistoryPanelOpen] = useState(false);\r\n    const [promptTemplate, setPromptTemplate] = useState<string>(\"\");\r\n    const [temperature, setTemperature] = useState<number>(0.3);\r\n    const [seed, setSeed] = useState<number | null>(null);\r\n    const [minimumRerankerScore, setMinimumRerankerScore] = useState<number>(0);\r\n    const [minimumSearchScore, setMinimumSearchScore] = useState<number>(0);\r\n    const [retrieveCount, setRetrieveCount] = useState<number>(3);\r\n    const [retrievalMode, setRetrievalMode] = useState<RetrievalMode>(RetrievalMode.Hybrid);\r\n    const [useSemanticRanker, setUseSemanticRanker] = useState<boolean>(true);\r\n    const [shouldStream, setShouldStream] = useState<boolean>(true);\r\n    const [useSemanticCaptions, setUseSemanticCaptions] = useState<boolean>(false);\r\n    const [excludeCategory, setExcludeCategory] = useState<string>(\"\");\r\n    const [useSuggestFollowupQuestions, setUseSuggestFollowupQuestions] = useState<boolean>(false);\r\n    const [vectorFieldList, setVectorFieldList] = useState<VectorFieldOptions[]>([VectorFieldOptions.Embedding]);\r\n    const [useOidSecurityFilter, setUseOidSecurityFilter] = useState<boolean>(false);\r\n    const [useGroupsSecurityFilter, setUseGroupsSecurityFilter] = useState<boolean>(false);\r\n    const [gpt4vInput, setGPT4VInput] = useState<GPT4VInput>(GPT4VInput.TextAndImages);\r\n    const [useGPT4V, setUseGPT4V] = useState<boolean>(false);\r\n\r\n    const lastQuestionRef = useRef<string>(\"\");\r\n    const chatMessageStreamEnd = useRef<HTMLDivElement | null>(null);\r\n\r\n    const [isLoading, setIsLoading] = useState<boolean>(false);\r\n    const [isStreaming, setIsStreaming] = useState<boolean>(false);\r\n    const [error, setError] = useState<unknown>();\r\n\r\n    const [activeCitation, setActiveCitation] = useState<string>();\r\n    const [activeAnalysisPanelTab, setActiveAnalysisPanelTab] = useState<AnalysisPanelTabs | undefined>(undefined);\r\n\r\n    const [selectedAnswer, setSelectedAnswer] = useState<number>(0);\r\n    const [answers, setAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [streamedAnswers, setStreamedAnswers] = useState<[user: string, response: ChatAppResponse][]>([]);\r\n    const [speechUrls, setSpeechUrls] = useState<(string | null)[]>([]);\r\n\r\n    const [showGPT4VOptions, setShowGPT4VOptions] = useState<boolean>(false);\r\n    const [showSemanticRankerOption, setShowSemanticRankerOption] = useState<boolean>(false);\r\n    const [showVectorOption, setShowVectorOption] = useState<boolean>(false);\r\n    const [showUserUpload, setShowUserUpload] = useState<boolean>(false);\r\n    const [showLanguagePicker, setshowLanguagePicker] = useState<boolean>(false);\r\n    const [showSpeechInput, setShowSpeechInput] = useState<boolean>(false);\r\n    const [showSpeechOutputBrowser, setShowSpeechOutputBrowser] = useState<boolean>(false);\r\n    const [showSpeechOutputAzure, setShowSpeechOutputAzure] = useState<boolean>(false);\r\n    const [showChatHistoryBrowser, setShowChatHistoryBrowser] = useState<boolean>(false);\r\n    const audio = useRef(new Audio()).current;\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n\r\n    const speechConfig: SpeechConfig = {\r\n        speechUrls,\r\n        setSpeechUrls,\r\n        audio,\r\n        isPlaying,\r\n        setIsPlaying\r\n    };\r\n\r\n    const getConfig = async () => {\r\n        configApi().then(config => {\r\n            setShowGPT4VOptions(config.showGPT4VOptions);\r\n            setUseSemanticRanker(config.showSemanticRankerOption);\r\n            setShowSemanticRankerOption(config.showSemanticRankerOption);\r\n            setShowVectorOption(config.showVectorOption);\r\n            if (!config.showVectorOption) {\r\n                setRetrievalMode(RetrievalMode.Text);\r\n            }\r\n            setShowUserUpload(config.showUserUpload);\r\n            setshowLanguagePicker(config.showLanguagePicker);\r\n            setShowSpeechInput(config.showSpeechInput);\r\n            setShowSpeechOutputBrowser(config.showSpeechOutputBrowser);\r\n            setShowSpeechOutputAzure(config.showSpeechOutputAzure);\r\n            setShowChatHistoryBrowser(config.showChatHistoryBrowser);\r\n        });\r\n    };\r\n\r\n    const handleAsyncRequest = async (question: string, answers: [string, ChatAppResponse][], responseBody: ReadableStream<any>) => {\r\n        let answer: string = \"\";\r\n        let askResponse: ChatAppResponse = {} as ChatAppResponse;\r\n\r\n        const updateState = (newContent: string) => {\r\n            return new Promise(resolve => {\r\n                setTimeout(() => {\r\n                    answer += newContent;\r\n                    const latestResponse: ChatAppResponse = {\r\n                        ...askResponse,\r\n                        message: { content: answer, role: askResponse.message.role }\r\n                    };\r\n                    setStreamedAnswers([...answers, [question, latestResponse]]);\r\n                    resolve(null);\r\n                }, 33);\r\n            });\r\n        };\r\n        try {\r\n            setIsStreaming(true);\r\n            for await (const event of readNDJSONStream(responseBody)) {\r\n                if (event[\"context\"] && event[\"context\"][\"data_points\"]) {\r\n                    event[\"message\"] = event[\"delta\"];\r\n                    askResponse = event as ChatAppResponse;\r\n                } else if (event[\"delta\"] && event[\"delta\"][\"content\"]) {\r\n                    setIsLoading(false);\r\n                    await updateState(event[\"delta\"][\"content\"]);\r\n                } else if (event[\"context\"]) {\r\n                    // Update context with new keys from latest event\r\n                    askResponse.context = { ...askResponse.context, ...event[\"context\"] };\r\n                } else if (event[\"error\"]) {\r\n                    throw Error(event[\"error\"]);\r\n                }\r\n            }\r\n        } finally {\r\n            setIsStreaming(false);\r\n        }\r\n        const fullResponse: ChatAppResponse = {\r\n            ...askResponse,\r\n            message: { content: answer, role: askResponse.message.role }\r\n        };\r\n        return fullResponse;\r\n    };\r\n\r\n    const client = useLogin ? useMsal().instance : undefined;\r\n    const { loggedIn } = useContext(LoginContext);\r\n\r\n    const historyProvider: HistoryProviderOptions = showChatHistoryBrowser ? HistoryProviderOptions.IndexedDB : HistoryProviderOptions.None;\r\n    const historyManager = useHistoryManager(historyProvider);\r\n\r\n    const makeApiRequest = async (question: string) => {\r\n        lastQuestionRef.current = question;\r\n\r\n        error && setError(undefined);\r\n        setIsLoading(true);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n\r\n        const token = client ? await getToken(client) : undefined;\r\n\r\n        try {\r\n            const messages: ResponseMessage[] = answers.flatMap(a => [\r\n                { content: a[0], role: \"user\" },\r\n                { content: a[1].message.content, role: \"assistant\" }\r\n            ]);\r\n\r\n            const request: ChatAppRequest = {\r\n                messages: [...messages, { content: question, role: \"user\" }],\r\n                context: {\r\n                    overrides: {\r\n                        prompt_template: promptTemplate.length === 0 ? undefined : promptTemplate,\r\n                        exclude_category: excludeCategory.length === 0 ? undefined : excludeCategory,\r\n                        top: retrieveCount,\r\n                        temperature: temperature,\r\n                        minimum_reranker_score: minimumRerankerScore,\r\n                        minimum_search_score: minimumSearchScore,\r\n                        retrieval_mode: retrievalMode,\r\n                        semantic_ranker: useSemanticRanker,\r\n                        semantic_captions: useSemanticCaptions,\r\n                        suggest_followup_questions: useSuggestFollowupQuestions,\r\n                        use_oid_security_filter: useOidSecurityFilter,\r\n                        use_groups_security_filter: useGroupsSecurityFilter,\r\n                        vector_fields: vectorFieldList,\r\n                        use_gpt4v: useGPT4V,\r\n                        gpt4v_input: gpt4vInput,\r\n                        language: i18n.language,\r\n                        ...(seed !== null ? { seed: seed } : {})\r\n                    }\r\n                },\r\n                // AI Chat Protocol: Client must pass on any session state received from the server\r\n                session_state: answers.length ? answers[answers.length - 1][1].session_state : null\r\n            };\r\n\r\n            const response = await chatApi(request, shouldStream, token);\r\n            if (!response.body) {\r\n                throw Error(\"No response body\");\r\n            }\r\n            if (response.status > 299 || !response.ok) {\r\n                throw Error(`Request failed with status ${response.status}`);\r\n            }\r\n            if (shouldStream) {\r\n                const parsedResponse: ChatAppResponse = await handleAsyncRequest(question, answers, response.body);\r\n                setAnswers([...answers, [question, parsedResponse]]);\r\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\r\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse]]);\r\n                }\r\n            } else {\r\n                const parsedResponse: ChatAppResponseOrError = await response.json();\r\n                if (parsedResponse.error) {\r\n                    throw Error(parsedResponse.error);\r\n                }\r\n                setAnswers([...answers, [question, parsedResponse as ChatAppResponse]]);\r\n                if (typeof parsedResponse.session_state === \"string\" && parsedResponse.session_state !== \"\") {\r\n                    historyManager.addItem(parsedResponse.session_state, [...answers, [question, parsedResponse as ChatAppResponse]]);\r\n                }\r\n            }\r\n            setSpeechUrls([...speechUrls, null]);\r\n        } catch (e) {\r\n            setError(e);\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const clearChat = () => {\r\n        lastQuestionRef.current = \"\";\r\n        error && setError(undefined);\r\n        setActiveCitation(undefined);\r\n        setActiveAnalysisPanelTab(undefined);\r\n        setAnswers([]);\r\n        setSpeechUrls([]);\r\n        setStreamedAnswers([]);\r\n        setIsLoading(false);\r\n        setIsStreaming(false);\r\n    };\r\n\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"smooth\" }), [isLoading]);\r\n    useEffect(() => chatMessageStreamEnd.current?.scrollIntoView({ behavior: \"auto\" }), [streamedAnswers]);\r\n    useEffect(() => {\r\n        getConfig();\r\n    }, []);\r\n\r\n    const onPromptTemplateChange = (_ev?: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => {\r\n        setPromptTemplate(newValue || \"\");\r\n    };\r\n\r\n    const onTemperatureChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setTemperature(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onSeedChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setSeed(parseInt(newValue || \"\"));\r\n    };\r\n\r\n    const onMinimumSearchScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumSearchScore(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onMinimumRerankerScoreChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setMinimumRerankerScore(parseFloat(newValue || \"0\"));\r\n    };\r\n\r\n    const onRetrieveCountChange = (_ev?: React.SyntheticEvent<HTMLElement, Event>, newValue?: string) => {\r\n        setRetrieveCount(parseInt(newValue || \"3\"));\r\n    };\r\n\r\n    const onUseSemanticRankerChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticRanker(!!checked);\r\n    };\r\n\r\n    const onUseSemanticCaptionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSemanticCaptions(!!checked);\r\n    };\r\n\r\n    const onShouldStreamChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setShouldStream(!!checked);\r\n    };\r\n\r\n    const onExcludeCategoryChanged = (_ev?: React.FormEvent, newValue?: string) => {\r\n        setExcludeCategory(newValue || \"\");\r\n    };\r\n\r\n    const onUseSuggestFollowupQuestionsChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseSuggestFollowupQuestions(!!checked);\r\n    };\r\n\r\n    const onUseOidSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseOidSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onUseGroupsSecurityFilterChange = (_ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => {\r\n        setUseGroupsSecurityFilter(!!checked);\r\n    };\r\n\r\n    const onExampleClicked = (example: string) => {\r\n        makeApiRequest(example);\r\n    };\r\n\r\n    const onShowCitation = (citation: string, index: number) => {\r\n        if (activeCitation === citation && activeAnalysisPanelTab === AnalysisPanelTabs.CitationTab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveCitation(citation);\r\n            setActiveAnalysisPanelTab(AnalysisPanelTabs.CitationTab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    const onToggleTab = (tab: AnalysisPanelTabs, index: number) => {\r\n        if (activeAnalysisPanelTab === tab && selectedAnswer === index) {\r\n            setActiveAnalysisPanelTab(undefined);\r\n        } else {\r\n            setActiveAnalysisPanelTab(tab);\r\n        }\r\n\r\n        setSelectedAnswer(index);\r\n    };\r\n\r\n    // IDs for form labels and their associated callouts\r\n    const promptTemplateId = useId(\"promptTemplate\");\r\n    const promptTemplateFieldId = useId(\"promptTemplateField\");\r\n    const temperatureId = useId(\"temperature\");\r\n    const temperatureFieldId = useId(\"temperatureField\");\r\n    const seedId = useId(\"seed\");\r\n    const seedFieldId = useId(\"seedField\");\r\n    const searchScoreId = useId(\"searchScore\");\r\n    const searchScoreFieldId = useId(\"searchScoreField\");\r\n    const rerankerScoreId = useId(\"rerankerScore\");\r\n    const rerankerScoreFieldId = useId(\"rerankerScoreField\");\r\n    const retrieveCountId = useId(\"retrieveCount\");\r\n    const retrieveCountFieldId = useId(\"retrieveCountField\");\r\n    const excludeCategoryId = useId(\"excludeCategory\");\r\n    const excludeCategoryFieldId = useId(\"excludeCategoryField\");\r\n    const semanticRankerId = useId(\"semanticRanker\");\r\n    const semanticRankerFieldId = useId(\"semanticRankerField\");\r\n    const semanticCaptionsId = useId(\"semanticCaptions\");\r\n    const semanticCaptionsFieldId = useId(\"semanticCaptionsField\");\r\n    const suggestFollowupQuestionsId = useId(\"suggestFollowupQuestions\");\r\n    const suggestFollowupQuestionsFieldId = useId(\"suggestFollowupQuestionsField\");\r\n    const useOidSecurityFilterId = useId(\"useOidSecurityFilter\");\r\n    const useOidSecurityFilterFieldId = useId(\"useOidSecurityFilterField\");\r\n    const useGroupsSecurityFilterId = useId(\"useGroupsSecurityFilter\");\r\n    const useGroupsSecurityFilterFieldId = useId(\"useGroupsSecurityFilterField\");\r\n    const shouldStreamId = useId(\"shouldStream\");\r\n    const shouldStreamFieldId = useId(\"shouldStreamField\");\r\n    const { t, i18n } = useTranslation();\r\n\r\n    return (\r\n        <ThemeProvider theme={darkTheme}>\r\n            <div\r\n                style={{\r\n                    display: isSidebarVisible ? \"flex\" : 'block',\r\n                    justifyContent: \"space-between\",\r\n                }}\r\n            >\r\n\r\n                {isSidebarVisible ? <div>\r\n                    <button onClick={() => setIsSidebarVisible(false)}>\r\n                        <FontAwesomeIcon\r\n                            icon={faAngleDoubleRight}\r\n                        />\r\n                    </button>\r\n                    <LeftSidebar\r\n                        provider={historyProvider}\r\n                        historyManager={historyManager}\r\n                        isOpen={isHistoryPanelOpen}\r\n                        notify={!isStreaming && !isLoading}\r\n                        onClose={() => setIsHistoryPanelOpen(false)}\r\n                        onChatSelected={answers => {\r\n                            if (answers.length === 0) return;\r\n                            setAnswers(answers);\r\n                            lastQuestionRef.current = answers[answers.length - 1][0];\r\n                        }}\r\n                    />\r\n                </div> : null}\r\n                <div\r\n                    style={{\r\n                        flex: 1\r\n                    }}\r\n                >\r\n                    <div className={styles.commandsSplitContainer}>\r\n                        <div>\r\n                            {!isSidebarVisible ?\r\n                                <button onClick={() => setIsSidebarVisible(true)}>\r\n                                    <FontAwesomeIcon icon={faAngleDoubleLeft} />\r\n                                </button> : null}\r\n                        </div>\r\n                        <div className={styles.commandsContainer}\r\n                        >\r\n                            <ClearChatButton className={styles.commandButton} onClick={clearChat} disabled={!lastQuestionRef.current || isLoading} />\r\n                            {showUserUpload && <UploadFile className={styles.commandButton} disabled={!loggedIn} />}\r\n                            {/* <UploadFile className={styles.commandButton} disabled={false} /> */}\r\n                            <SettingsButton className={styles.commandButton} onClick={() => setIsConfigPanelOpen(!isConfigPanelOpen)} />\r\n                        </div>\r\n                    </div>\r\n                    <div className={styles.chatRoot} style={{ marginLeft: isHistoryPanelOpen ? \"300px\" : \"0\" }}>\r\n                        <div className={styles.chatContainer}>\r\n                            {!lastQuestionRef.current ? (\r\n                                <div className={styles.chatEmptyState}>\r\n                                    <SparkleFilled fontSize={\"120px\"} primaryFill={\"rgba(115, 118, 225, 1)\"} aria-hidden=\"true\" />\r\n                                    {/* <h1>Ask.tsx</h1> */}\r\n                                    <h1 className={styles.chatEmptyStateTitle}>{t(\"chatEmptyStateTitle\")}</h1>\r\n                                    <h2 className={styles.chatEmptyStateSubtitle}>{t(\"chatEmptyStateSubtitle\")}</h2>\r\n                                    {showLanguagePicker && <LanguagePicker onLanguageChange={newLang => i18n.changeLanguage(newLang)} />}\r\n                                    <ExampleList onExampleClicked={onExampleClicked} useGPT4V={useGPT4V} />\r\n                                </div>\r\n                            ) : (\r\n                                <div className={styles.chatMessageStream}>\r\n                                    {isStreaming &&\r\n                                        streamedAnswers.map((streamedAnswer, index) => (\r\n                                            <div key={index}>\r\n                                                <UserChatMessage message={streamedAnswer[0]} />\r\n                                                <div className={styles.chatMessageGpt}>\r\n                                                    <Answer\r\n                                                        isStreaming={true}\r\n                                                        key={index}\r\n                                                        answer={streamedAnswer[1]}\r\n                                                        index={index}\r\n                                                        speechConfig={speechConfig}\r\n                                                        isSelected={false}\r\n                                                        onCitationClicked={c => onShowCitation(c, index)}\r\n                                                        onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                        onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                        onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                        showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                                        showSpeechOutputAzure={showSpeechOutputAzure}\r\n                                                        showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    {!isStreaming &&\r\n                                        answers.map((answer, index) => (\r\n                                            <div key={index}>\r\n                                                <UserChatMessage message={answer[0]} />\r\n                                                <div className={styles.chatMessageGpt}>\r\n                                                    <Answer\r\n                                                        isStreaming={false}\r\n                                                        key={index}\r\n                                                        answer={answer[1]}\r\n                                                        index={index}\r\n                                                        speechConfig={speechConfig}\r\n                                                        isSelected={selectedAnswer === index && activeAnalysisPanelTab !== undefined}\r\n                                                        onCitationClicked={c => onShowCitation(c, index)}\r\n                                                        onThoughtProcessClicked={() => onToggleTab(AnalysisPanelTabs.ThoughtProcessTab, index)}\r\n                                                        onSupportingContentClicked={() => onToggleTab(AnalysisPanelTabs.SupportingContentTab, index)}\r\n                                                        onFollowupQuestionClicked={q => makeApiRequest(q)}\r\n                                                        showFollowupQuestions={useSuggestFollowupQuestions && answers.length - 1 === index}\r\n                                                        showSpeechOutputAzure={showSpeechOutputAzure}\r\n                                                        showSpeechOutputBrowser={showSpeechOutputBrowser}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        ))}\r\n                                    {isLoading && (\r\n                                        <>\r\n                                            <UserChatMessage message={lastQuestionRef.current} />\r\n                                            <div className={styles.chatMessageGptMinWidth}>\r\n                                                <AnswerLoading />\r\n                                            </div>\r\n                                        </>\r\n                                    )}\r\n                                    {error ? (\r\n                                        <>\r\n                                            <UserChatMessage message={lastQuestionRef.current} />\r\n                                            <div className={styles.chatMessageGptMinWidth}>\r\n                                                <AnswerError error={error.toString()} onRetry={() => makeApiRequest(lastQuestionRef.current)} />\r\n                                            </div>\r\n                                        </>\r\n                                    ) : null}\r\n                                    <div ref={chatMessageStreamEnd} />\r\n                                </div>\r\n                            )}\r\n\r\n                            <div className={styles.chatInput}>\r\n                                <QuestionInput\r\n                                    clearOnSend\r\n                                    placeholder={t(\"defaultExamples.placeholder\")}\r\n                                    disabled={isLoading}\r\n                                    onSend={question => makeApiRequest(question)}\r\n                                    showSpeechInput={showSpeechInput}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        {answers.length > 0 && activeAnalysisPanelTab && (\r\n                            <AnalysisPanel\r\n                                className={styles.chatAnalysisPanel}\r\n                                activeCitation={activeCitation}\r\n                                onActiveTabChanged={x => onToggleTab(x, selectedAnswer)}\r\n                                citationHeight=\"810px\"\r\n                                answer={answers[selectedAnswer][1]}\r\n                                activeTab={activeAnalysisPanelTab}\r\n                            />\r\n                        )}\r\n\r\n                        {showChatHistoryBrowser && (\r\n                            <HistoryPanel\r\n                                provider={historyProvider}\r\n                                isOpen={isHistoryPanelOpen}\r\n                                notify={!isStreaming && !isLoading}\r\n                                onClose={() => setIsHistoryPanelOpen(false)}\r\n                                onChatSelected={answers => {\r\n                                    if (answers.length === 0) return;\r\n                                    setAnswers(answers);\r\n                                    lastQuestionRef.current = answers[answers.length - 1][0];\r\n                                }}\r\n                            />\r\n                        )}\r\n\r\n                        <Panel\r\n                            headerText={t(\"labels.headerText\")}\r\n                            isOpen={isConfigPanelOpen}\r\n                            isBlocking={false}\r\n                            onDismiss={() => setIsConfigPanelOpen(false)}\r\n                            closeButtonAriaLabel={t(\"labels.closeButton\")}\r\n                            onRenderFooterContent={() => <DefaultButton onClick={() => setIsConfigPanelOpen(false)}>{t(\"labels.closeButton\")}</DefaultButton>}\r\n                            isFooterAtBottom={true}\r\n                        >\r\n                            <TextField\r\n                                id={promptTemplateFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                defaultValue={promptTemplate}\r\n                                label={t(\"labels.promptTemplate\")}\r\n                                multiline\r\n                                autoAdjustHeight\r\n                                onChange={onPromptTemplateChange}\r\n                                aria-labelledby={promptTemplateId}\r\n                                onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={promptTemplateId}\r\n                                        fieldId={promptTemplateFieldId}\r\n                                        helpText={t(\"helpTexts.promptTemplate\")}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            <TextField\r\n                                id={temperatureFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                label={t(\"labels.temperature\")}\r\n                                type=\"number\"\r\n                                min={0}\r\n                                max={1}\r\n                                step={0.1}\r\n                                defaultValue={temperature.toString()}\r\n                                onChange={onTemperatureChange}\r\n                                aria-labelledby={temperatureId}\r\n                                onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                    <HelpCallout labelId={temperatureId} fieldId={temperatureFieldId} helpText={t(\"helpTexts.temperature\")} label={props?.label} />\r\n                                )}\r\n                            />\r\n\r\n                            <TextField\r\n                                id={seedFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                label={t(\"labels.seed\")}\r\n                                type=\"text\"\r\n                                defaultValue={seed?.toString() || \"\"}\r\n                                onChange={onSeedChange}\r\n                                aria-labelledby={seedId}\r\n                                onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                    <HelpCallout labelId={seedId} fieldId={seedFieldId} helpText={t(\"helpTexts.seed\")} label={props?.label} />\r\n                                )}\r\n                            />\r\n\r\n                            <TextField\r\n                                id={searchScoreFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                label={t(\"labels.minimumSearchScore\")}\r\n                                type=\"number\"\r\n                                min={0}\r\n                                step={0.01}\r\n                                defaultValue={minimumSearchScore.toString()}\r\n                                onChange={onMinimumSearchScoreChange}\r\n                                aria-labelledby={searchScoreId}\r\n                                onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                    <HelpCallout labelId={searchScoreId} fieldId={searchScoreFieldId} helpText={t(\"helpTexts.searchScore\")} label={props?.label} />\r\n                                )}\r\n                            />\r\n\r\n                            {showSemanticRankerOption && (\r\n                                <TextField\r\n                                    id={rerankerScoreFieldId}\r\n                                    className={styles.chatSettingsSeparator}\r\n                                    label={t(\"labels.minimumRerankerScore\")}\r\n                                    type=\"number\"\r\n                                    min={1}\r\n                                    max={4}\r\n                                    step={0.1}\r\n                                    defaultValue={minimumRerankerScore.toString()}\r\n                                    onChange={onMinimumRerankerScoreChange}\r\n                                    aria-labelledby={rerankerScoreId}\r\n                                    onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                        <HelpCallout\r\n                                            labelId={rerankerScoreId}\r\n                                            fieldId={rerankerScoreFieldId}\r\n                                            helpText={t(\"helpTexts.rerankerScore\")}\r\n                                            label={props?.label}\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            )}\r\n\r\n                            <TextField\r\n                                id={retrieveCountFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                label={t(\"labels.retrieveCount\")}\r\n                                type=\"number\"\r\n                                min={1}\r\n                                max={50}\r\n                                defaultValue={retrieveCount.toString()}\r\n                                onChange={onRetrieveCountChange}\r\n                                aria-labelledby={retrieveCountId}\r\n                                onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={retrieveCountId}\r\n                                        fieldId={retrieveCountFieldId}\r\n                                        helpText={t(\"helpTexts.retrieveNumber\")}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            <TextField\r\n                                id={excludeCategoryFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                label={t(\"labels.excludeCategory\")}\r\n                                defaultValue={excludeCategory}\r\n                                onChange={onExcludeCategoryChanged}\r\n                                aria-labelledby={excludeCategoryId}\r\n                                onRenderLabel={(props: ITextFieldProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={excludeCategoryId}\r\n                                        fieldId={excludeCategoryFieldId}\r\n                                        helpText={t(\"helpTexts.excludeCategory\")}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            {showSemanticRankerOption && (\r\n                                <>\r\n                                    <Checkbox\r\n                                        id={semanticRankerFieldId}\r\n                                        className={styles.chatSettingsSeparator}\r\n                                        checked={useSemanticRanker}\r\n                                        label={t(\"labels.useSemanticRanker\")}\r\n                                        onChange={onUseSemanticRankerChange}\r\n                                        aria-labelledby={semanticRankerId}\r\n                                        onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                            <HelpCallout\r\n                                                labelId={semanticRankerId}\r\n                                                fieldId={semanticRankerFieldId}\r\n                                                helpText={t(\"helpTexts.useSemanticReranker\")}\r\n                                                label={props?.label}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n\r\n                                    <Checkbox\r\n                                        id={semanticCaptionsFieldId}\r\n                                        className={styles.chatSettingsSeparator}\r\n                                        checked={useSemanticCaptions}\r\n                                        label={t(\"labels.useSemanticCaptions\")}\r\n                                        onChange={onUseSemanticCaptionsChange}\r\n                                        disabled={!useSemanticRanker}\r\n                                        aria-labelledby={semanticCaptionsId}\r\n                                        onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                            <HelpCallout\r\n                                                labelId={semanticCaptionsId}\r\n                                                fieldId={semanticCaptionsFieldId}\r\n                                                helpText={t(\"helpTexts.useSemanticCaptions\")}\r\n                                                label={props?.label}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </>\r\n                            )}\r\n\r\n                            <Checkbox\r\n                                id={suggestFollowupQuestionsFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                checked={useSuggestFollowupQuestions}\r\n                                label={t(\"labels.useSuggestFollowupQuestions\")}\r\n                                onChange={onUseSuggestFollowupQuestionsChange}\r\n                                aria-labelledby={suggestFollowupQuestionsId}\r\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                    <HelpCallout\r\n                                        labelId={suggestFollowupQuestionsId}\r\n                                        fieldId={suggestFollowupQuestionsFieldId}\r\n                                        helpText={t(\"helpTexts.suggestFollowupQuestions\")}\r\n                                        label={props?.label}\r\n                                    />\r\n                                )}\r\n                            />\r\n\r\n                            {showGPT4VOptions && (\r\n                                <GPT4VSettings\r\n                                    gpt4vInputs={gpt4vInput}\r\n                                    isUseGPT4V={useGPT4V}\r\n                                    updateUseGPT4V={useGPT4V => {\r\n                                        setUseGPT4V(useGPT4V);\r\n                                    }}\r\n                                    updateGPT4VInputs={inputs => setGPT4VInput(inputs)}\r\n                                />\r\n                            )}\r\n\r\n                            {showVectorOption && (\r\n                                <VectorSettings\r\n                                    defaultRetrievalMode={retrievalMode}\r\n                                    showImageOptions={useGPT4V && showGPT4VOptions}\r\n                                    updateVectorFields={(options: VectorFieldOptions[]) => setVectorFieldList(options)}\r\n                                    updateRetrievalMode={(retrievalMode: RetrievalMode) => setRetrievalMode(retrievalMode)}\r\n                                />\r\n                            )}\r\n\r\n                            {useLogin && (\r\n                                <>\r\n                                    <Checkbox\r\n                                        id={useOidSecurityFilterFieldId}\r\n                                        className={styles.chatSettingsSeparator}\r\n                                        checked={useOidSecurityFilter || requireAccessControl}\r\n                                        label={t(\"labels.useOidSecurityFilter\")}\r\n                                        disabled={!loggedIn || requireAccessControl}\r\n                                        onChange={onUseOidSecurityFilterChange}\r\n                                        aria-labelledby={useOidSecurityFilterId}\r\n                                        onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                            <HelpCallout\r\n                                                labelId={useOidSecurityFilterId}\r\n                                                fieldId={useOidSecurityFilterFieldId}\r\n                                                helpText={t(\"helpTexts.useOidSecurityFilter\")}\r\n                                                label={props?.label}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    <Checkbox\r\n                                        id={useGroupsSecurityFilterFieldId}\r\n                                        className={styles.chatSettingsSeparator}\r\n                                        checked={useGroupsSecurityFilter || requireAccessControl}\r\n                                        label={t(\"labels.useGroupsSecurityFilter\")}\r\n                                        disabled={!loggedIn || requireAccessControl}\r\n                                        onChange={onUseGroupsSecurityFilterChange}\r\n                                        aria-labelledby={useGroupsSecurityFilterId}\r\n                                        onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                            <HelpCallout\r\n                                                labelId={useGroupsSecurityFilterId}\r\n                                                fieldId={useGroupsSecurityFilterFieldId}\r\n                                                helpText={t(\"helpTexts.useGroupsSecurityFilter\")}\r\n                                                label={props?.label}\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                </>\r\n                            )}\r\n\r\n                            <Checkbox\r\n                                id={shouldStreamFieldId}\r\n                                className={styles.chatSettingsSeparator}\r\n                                checked={shouldStream}\r\n                                label={t(\"labels.shouldStream\")}\r\n                                onChange={onShouldStreamChange}\r\n                                aria-labelledby={shouldStreamId}\r\n                                onRenderLabel={(props: ICheckboxProps | undefined) => (\r\n                                    <HelpCallout labelId={shouldStreamId} fieldId={shouldStreamFieldId} helpText={t(\"helpTexts.streamChat\")} label={props?.label} />\r\n                                )}\r\n                            />\r\n\r\n                            {useLogin && <TokenClaimsDisplay />}\r\n                        </Panel>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </ThemeProvider>\r\n\r\n    );\r\n};\r\n\r\n\r\nexport default Chat;\r\n","import React, { useState } from 'react';\r\nimport './files.css';\r\n// import './pages/files/files'; // Create a separate CSS file for styling\r\n// import Files from \"./pages/files/files\";\r\n\r\n// \"./pages/docs/Docs\";\r\ninterface UploadedFile {\r\n    name: string;\r\n    size: string;\r\n    date: string;\r\n}\r\n\r\ninterface FileGroup {\r\n    name: string;\r\n    files: UploadedFile[];\r\n}\r\n\r\nconst Files: React.FC = () => {\r\n    const [uploadedFiles, setUploadedFiles] = useState<UploadedFile[]>([]); // Stores uploaded files\r\n    const [groups, setGroups] = useState<FileGroup[]>([]); // Stores file groups\r\n    const [activeTab, setActiveTab] = useState<string>('File Collection'); // Track active tab\r\n\r\n    const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const files = Array.from(event.target.files || []); // Convert FileList to Array\r\n        const newFiles = files.map((file) => ({\r\n            name: file.name,\r\n            size: `${(file.size / 1024).toFixed(2)} KB`,\r\n            date: new Date().toLocaleString(),\r\n        }));\r\n        setUploadedFiles((prev) => [...prev, ...newFiles]);\r\n    };\r\n\r\n    const createGroup = () => {\r\n        if (uploadedFiles.length > 0) {\r\n            setGroups((prev) => [\r\n                ...prev,\r\n                { name: `Group ${prev.length + 1}`, files: uploadedFiles },\r\n            ]);\r\n            setUploadedFiles([]); // Clear uploaded files after grouping\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"files-section\">\r\n            <div className=\"tabs\">\r\n                <button\r\n                    className={activeTab === 'File Collection' ? 'active' : ''}\r\n                    onClick={() => setActiveTab('File Collection')}\r\n                >\r\n                    File Collection\r\n                </button>\r\n                <button\r\n                    className={activeTab === 'GraphRAG Collection' ? 'active' : ''}\r\n                    onClick={() => setActiveTab('GraphRAG Collection')}\r\n                >\r\n                    GraphRAG Collection\r\n                </button>\r\n            </div>\r\n\r\n            {activeTab === 'File Collection' && (\r\n                <div className=\"file-collection\">\r\n                    <div className=\"upload-section\">\r\n                        <label htmlFor=\"file-upload\" className=\"upload-box\">\r\n                        {/* <label htmlFor=\"UploadFile\" className=\"upload-box\"> */}\r\n                            <div>\r\n                                <span>📤</span>\r\n                                <p>Drop File Here - or - Click to Upload</p>\r\n                            </div>\r\n                            <input\r\n                                id=\"file-upload\"\r\n                                type=\"file\"\r\n                                multiple\r\n                                onChange={handleFileUpload}\r\n                                style={{ display: 'none' }}\r\n                            />\r\n                        </label>\r\n                        <small>\r\n                            Supported file types: .png, .jpeg, .pdf, etc. (Max size: 1GB)\r\n                        </small>\r\n                    </div>\r\n                    <div className=\"file-list\">\r\n                        <h3>Files</h3>\r\n                        {uploadedFiles.length > 0 ? (\r\n                            <ul>\r\n                                {uploadedFiles.map((file, index) => (\r\n                                    <li key={index}>\r\n                                        <span>{file.name}</span>\r\n                                        <span>{file.size}</span>\r\n                                        <span>{file.date}</span>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        ) : (\r\n                            <p>No files uploaded yet.</p>\r\n                            // <p style=\"color: #ffffff;\">No files uploaded yet.</p>\r\n                            // <p style=\"color: #ffffff; background-color: #333333;\">No files uploaded yet.</p>\r\n\r\n                        )}\r\n                    </div>\r\n                    <div className=\"group-section\">\r\n                        <h3>Groups</h3>\r\n                        <button onClick={createGroup}>Create Group</button>\r\n                        {groups.length > 0 ? (\r\n                            <ul>\r\n                                {groups.map((group, index) => (\r\n                                    <li key={index}>\r\n                                        <strong>{group.name}</strong>\r\n                                        <ul>\r\n                                            {group.files.map((file, fileIndex) => (\r\n                                                <li key={fileIndex}>{file.name}</li>\r\n                                            ))}\r\n                                        </ul>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        ) : (\r\n                            <p>No groups created yet.</p>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {activeTab === 'GraphRAG Collection' && (\r\n                <div className=\"graphrag-collection\">\r\n                    <h3>GraphRAG Collection</h3>\r\n                    <p>Manage GraphRAG files here.</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\nexport default Files;\r\n","import React, { useState } from \"react\";\r\nimport \"./help.css\";\r\n\r\nconst Help: React.FC = () => {\r\n    const [activeSection, setActiveSection] = useState<\"about\" | \"userGuide\">(\"about\");\r\n\r\n    return (\r\n        <div className=\"help-container\">\r\n            <div className=\"dropdown-container\">\r\n                {/* About Section */}\r\n                <div\r\n                    className={`dropdown-item ${activeSection === \"about\" ? \"active\" : \"\"}`}\r\n                    onClick={() => setActiveSection(\"about\")}\r\n                >\r\n                    <h3>About</h3>\r\n                    {activeSection === \"about\" && (\r\n                        <div className=\"dropdown-content\">\r\n                            <p>\r\n                                <strong>Version:</strong> Local\r\n                            </p>\r\n                            <h3>Braein Energy AI Data Explorer</h3>\r\n                            <p>\r\n                                Welcome to the Braein Energy AI Data Explorer! This platform is designed to help users\r\n                                manage files, explore resources, and interact with AI-powered tools to streamline\r\n                                workflows and enhance productivity. Navigate through the tabs to explore the various\r\n                                features we offer.\r\n                            </p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                {/* User Guide Section */}\r\n                <div\r\n                    className={`dropdown-item ${activeSection === \"userGuide\" ? \"active\" : \"\"}`}\r\n                    onClick={() => setActiveSection(\"userGuide\")}\r\n                >\r\n                    <h3>User Guide</h3>\r\n                    {activeSection === \"userGuide\" && (\r\n                        <div className=\"dropdown-content\">\r\n                            <h4>1. Add Your AI Models</h4>\r\n                            <p>\r\n                                Navigate to the <strong>Resources</strong> tab to manage LLMs and embeddings:\r\n                            </p>\r\n                            <ul>\r\n                                <li>\r\n                                    <strong>View:</strong> Explore available LLMs and embeddings in their respective\r\n                                    sections.\r\n                                </li>\r\n                                <li>\r\n                                    <strong>Add:</strong> Add new LLMs or embeddings by providing required details and\r\n                                    configuration.\r\n                                </li>\r\n                            </ul>\r\n\r\n                            <h4>2. Manage Files</h4>\r\n                            <p>\r\n                                Use the <strong>Files</strong> tab to upload, index, and group files. The platform\r\n                                supports various formats, including PDFs, images, and more. Use the grouping feature to\r\n                                manage multiple files.\r\n                            </p>\r\n\r\n                            <h4>3. Query and Explore Data</h4>\r\n                            <p>\r\n                                Leverage the <strong>Chat</strong> tab to ask questions about uploaded files or indexed\r\n                                data. The AI assistant provides contextual answers and highlights relevant sections in\r\n                                the uploaded documents.\r\n                            </p>\r\n\r\n                            <h4>4. Configuration</h4>\r\n                            <p>\r\n                                Visit the <strong>Settings</strong> tab to configure platform preferences, toggle\r\n                                between light/dark modes, and manage user profiles.\r\n                            </p>\r\n\r\n                            <h4>5. Integration</h4>\r\n                            <p>\r\n                                The platform integrates with various AI and data management tools, allowing seamless\r\n                                interaction with large language models, embedding systems, and custom data sets.\r\n                            </p>\r\n\r\n                            <h4>6. Advanced Features</h4>\r\n                            <p>\r\n                                <strong>File Groups:</strong> Use the grouping feature to manage related documents\r\n                                together.<br />\r\n                                <strong>Interactive Highlights:</strong> While querying files, the assistant\r\n                                automatically highlights relevant sections.\r\n                            </p>\r\n\r\n                            <p>Explore more features by navigating through the tabs!</p>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Help;\r\n","export default \"__VITE_ASSET__XJX_ZCus__\"","export default \"__VITE_ASSET__DZsIc0kg__\"","import { DefaultButton } from \"@fluentui/react\";\r\nimport { useMsal } from \"@azure/msal-react\";\r\nimport { useTranslation } from \"react-i18next\";\r\n\r\nimport styles from \"./LoginButton.module.css\";\r\nimport { getRedirectUri, loginRequest, appServicesLogout, getUsername, checkLoggedIn } from \"../../authConfig\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { LoginContext } from \"../../loginContext\";\r\n\r\nexport const LoginButton = () => {\r\n    const { instance } = useMsal();\r\n    const { loggedIn, setLoggedIn } = useContext(LoginContext);\r\n    const activeAccount = instance.getActiveAccount();\r\n    const [username, setUsername] = useState(\"\");\r\n    const { t } = useTranslation();\r\n\r\n    useEffect(() => {\r\n        const fetchUsername = async () => {\r\n            setUsername((await getUsername(instance)) ?? \"\");\r\n        };\r\n\r\n        fetchUsername();\r\n    }, []);\r\n\r\n    const handleLoginPopup = () => {\r\n        /**\r\n         * When using popup and silent APIs, we recommend setting the redirectUri to a blank page or a page\r\n         * that does not implement MSAL. Keep in mind that all redirect routes must be registered with the application\r\n         * For more information, please follow this link: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/login-user.md#redirecturi-considerations\r\n         */\r\n        instance\r\n            .loginPopup({\r\n                ...loginRequest,\r\n                redirectUri: getRedirectUri()\r\n            })\r\n            .catch(error => console.log(error))\r\n            .then(async () => {\r\n                setLoggedIn(await checkLoggedIn(instance));\r\n                setUsername((await getUsername(instance)) ?? \"\");\r\n            });\r\n    };\r\n    const handleLogoutPopup = () => {\r\n        if (activeAccount) {\r\n            instance\r\n                .logoutPopup({\r\n                    mainWindowRedirectUri: \"/\", // redirects the top level app after logout\r\n                    account: instance.getActiveAccount()\r\n                })\r\n                .catch(error => console.log(error))\r\n                .then(async () => {\r\n                    setLoggedIn(await checkLoggedIn(instance));\r\n                    setUsername((await getUsername(instance)) ?? \"\");\r\n                });\r\n        } else {\r\n            appServicesLogout();\r\n        }\r\n    };\r\n    return (\r\n        <DefaultButton\r\n            text={loggedIn ? `${t(\"logout\")}\\n${username}` : `${t(\"login\")}`}\r\n            className={styles.loginButton}\r\n            onClick={loggedIn ? handleLogoutPopup : handleLoginPopup}\r\n        ></DefaultButton>\r\n    );\r\n};\r\n","import React, { useState, useEffect, useRef, RefObject } from \"react\";\r\nimport { Outlet, NavLink, Link } from \"react-router-dom\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport styles from \"./Layout.module.css\";\r\nimport logo from \"D:/DataExplorer/newdemo/azure-search-openai-demo/app/frontend/src/assets/braein.png\";\r\nimport istLogo from \"D:/DataExplorer/newdemo/azure-search-openai-demo/app/frontend/src/assets/ist_logo_footer.svg\";\r\nimport { useLogin } from \"../../authConfig\";\r\nimport { LoginButton } from \"../../components/LoginButton\";\r\nimport { IconButton } from \"@fluentui/react\";\r\nimport LeftSidebar from \"../leftsidebar/LeftSidebar\"\r\nimport Help from \"../Help/help\"\r\nconst Layout = () => {\r\n    const [isSidebarVisible, setIsSidebarVisible] = useState(true);\r\n    const { t } = useTranslation();\r\n    const [menuOpen, setMenuOpen] = useState(false);\r\n    const menuRef: RefObject<HTMLDivElement> = useRef(null);\r\n\r\n    const toggleMenu = () => {\r\n        setMenuOpen(!menuOpen);\r\n    };\r\n\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n        if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n            setMenuOpen(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (menuOpen) {\r\n            document.addEventListener(\"mousedown\", handleClickOutside);\r\n        } else {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        }\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [menuOpen]);\r\n\r\n    return (\r\n        <div className={styles.layout}>\r\n            <header className={styles.header} role={\"banner\"}>\r\n                <div className={styles.headerContainer} ref={menuRef}>\r\n                    <Link to=\"/\" className={styles.headerTitleContainer}>\r\n                        <h3 className={styles.headerTitle}>{t(\"headerTitle\")}</h3>\r\n                    </Link>\r\n                    <div className={styles.headerContainer}>\r\n                        <Link\r\n                            to=\"/\"\r\n                            className={styles.headerTitleContainer}\r\n                            style={{\r\n                                width: \"100px\",\r\n                                height: \"auto\",\r\n                                marginLeft: \"10px\"\r\n                            }}\r\n                        >\r\n                            <img\r\n                                src={logo}\r\n                                className=\"navbar-logo\"\r\n                                style={{\r\n                                    background: \"none\",\r\n                                    width: \"100px\",\r\n                                    height: \"auto\"\r\n                                }}\r\n                            />\r\n                        </Link>\r\n                        <p\r\n                            style={{\r\n                                color: \"white\",\r\n                                fontSize: \"20px\",\r\n                                fontWeight: \"bold\",\r\n                                margin: \"0 10px\"\r\n                            }}\r\n                        >\r\n                            |\r\n                        </p>\r\n                        <Link\r\n                            to=\"/\"\r\n                            className={styles.headerTitleContainer}\r\n                            style={{\r\n                                width: \"100px\",\r\n                                height: \"auto\"\r\n                            }}\r\n                        >\r\n                            <img\r\n                                src={istLogo}\r\n                                className=\"navbar-logo\"\r\n                                style={{\r\n                                    background: \"none\",\r\n                                    width: \"100px\",\r\n                                    height: \"auto\"\r\n                                }}\r\n                            />\r\n                        </Link>\r\n                    </div>\r\n                    <div>\r\n                        <nav>\r\n                            <ul className={`${styles.headerNavList} ${menuOpen ? styles.show : \"\"}`}>\r\n                                <li>\r\n                                    <NavLink\r\n                                        to=\"/\"\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                        onClick={() => setMenuOpen(false)}\r\n                                    >\r\n                                        {t(\"chat\")}\r\n                                    </NavLink>\r\n                                </li>\r\n                                {/* <li>\r\n                                    <NavLink\r\n                                        to=\"/files\"\r\n                                        className={({ isActive }) =>\r\n                                            isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink\r\n                                        }\r\n                                        onClick={() => setMenuOpen(false)}\r\n                                    >\r\n                                        {t(\"files\")}\r\n                                    </NavLink>\r\n                                </li> */}\r\n                                <li>\r\n                                    <NavLink\r\n                                        to=\"/docs\"\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                        onClick={() => setMenuOpen(false)}\r\n                                    >\r\n                                        Files\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li>\r\n                                    <NavLink\r\n                                        to=\"/Resources\"\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                        onClick={() => setMenuOpen(false)}\r\n                                    >\r\n                                        Resources\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li>\r\n                                    <NavLink\r\n                                        to=\"/Settings\"\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                        onClick={() => setMenuOpen(false)}\r\n                                    >\r\n                                        Settings\r\n                                    </NavLink>\r\n                                </li>\r\n                                <li>\r\n                                    <NavLink\r\n                                        to=\"/help\"\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                        onClick={() => setMenuOpen(false)}\r\n                                    >\r\n                                        Help\r\n                                    </NavLink>\r\n                                </li>\r\n                                {/* <li>\r\n                                    <NavLink\r\n                                        to=\"/qa\"\r\n                                        className={({ isActive }) => (isActive ? styles.headerNavPageLinkActive : styles.headerNavPageLink)}\r\n                                        onClick={() => setMenuOpen(false)}\r\n                                    >\r\n                                        {t(\"qa\")}\r\n                                    </NavLink>\r\n                                </li> */}\r\n                            </ul>\r\n                        </nav>\r\n                        <div className={styles.loginMenuContainer}>\r\n                            {useLogin && <LoginButton />}\r\n                            <IconButton\r\n                                iconProps={{ iconName: \"GlobalNavButton\" }}\r\n                                className={styles.menuToggle}\r\n                                onClick={toggleMenu}\r\n                                ariaLabel={t(\"labels.toggleMenu\")}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n            <Outlet />\r\n            {/* <LeftSidebar isVisible={isSidebarVisible} /> */}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Layout;\r\n","import { AccountInfo, EventType, PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { checkLoggedIn, msalConfig, useLogin } from \"./authConfig\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { MsalProvider } from \"@azure/msal-react\";\r\nimport { LoginContext } from \"./loginContext\";\r\nimport Layout from \"./pages/layout/Layout\";\r\n\r\nconst LayoutWrapper = () => {\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n    if (useLogin) {\r\n        var msalInstance = new PublicClientApplication(msalConfig);\r\n\r\n        // Default to using the first account if no account is active on page load\r\n        if (!msalInstance.getActiveAccount() && msalInstance.getAllAccounts().length > 0) {\r\n            // Account selection logic is app dependent. Adjust as needed for different use cases.\r\n            msalInstance.setActiveAccount(msalInstance.getActiveAccount());\r\n        }\r\n\r\n        // Listen for sign-in event and set active account\r\n        msalInstance.addEventCallback(event => {\r\n            if (event.eventType === EventType.LOGIN_SUCCESS && event.payload) {\r\n                const account = event.payload as AccountInfo;\r\n                msalInstance.setActiveAccount(account);\r\n            }\r\n        });\r\n\r\n        useEffect(() => {\r\n            const fetchLoggedIn = async () => {\r\n                setLoggedIn(await checkLoggedIn(msalInstance));\r\n            };\r\n\r\n            fetchLoggedIn();\r\n        }, []);\r\n\r\n        return (\r\n            <MsalProvider instance={msalInstance}>\r\n                <LoginContext.Provider\r\n                    value={{\r\n                        loggedIn,\r\n                        setLoggedIn\r\n                    }}\r\n                >\r\n                    <Layout />\r\n                </LoginContext.Provider>\r\n            </MsalProvider>\r\n        );\r\n    } else {\r\n        return (\r\n            <LoginContext.Provider\r\n                value={{\r\n                    loggedIn,\r\n                    setLoggedIn\r\n                }}\r\n            >\r\n                <Layout />\r\n            </LoginContext.Provider>\r\n        );\r\n    }\r\n};\r\n\r\nexport default LayoutWrapper;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport { createHashRouter, RouterProvider } from \"react-router-dom\";\r\nimport { I18nextProvider } from \"react-i18next\";\r\nimport { HelmetProvider } from \"react-helmet-async\";\r\nimport { initializeIcons } from \"@fluentui/react\";\r\n\r\nimport \"./index.css\";\r\n\r\nimport Chat from \"./pages/chat/Chat\";\r\nimport Files from \"./pages/files/files\";\r\nimport Help from \"./pages/Help/help\";\r\n// import Files from \"./pages/files/files\";\r\n// import Docs from \"./pages/docs/Docs\";\r\nimport LayoutWrapper from \"./layoutWrapper\";\r\nimport i18next from \"./i18n/config\";\r\n\r\ninitializeIcons();\r\n\r\nconst router = createHashRouter([\r\n    {\r\n        path: \"/\",\r\n        element: <LayoutWrapper />,\r\n        children: [\r\n            {\r\n                index: true,\r\n                element: <Chat />\r\n            },\r\n            // {\r\n            //     path: \"files\",\r\n            //     lazy: () => import(\"./pages/files/files\")\r\n            // },\r\n            {\r\n                path: \"files\",\r\n                element: <Files />\r\n            },\r\n            {\r\n                path: \"Help\",\r\n                element: <Help />\r\n            },\r\n            {\r\n                path: \"docs\",\r\n                // element: <Docs />\r\n                lazy: () => import(\"./pages/docs/Docs\")\r\n            },\r\n            {\r\n                path: \"qa\",\r\n                lazy: () => import(\"./pages/ask/Ask\")\r\n            },\r\n            {\r\n                path: \"*\",\r\n                lazy: () => import(\"./pages/NoPage\")\r\n            }\r\n        ]\r\n    }\r\n]);\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\") as HTMLElement).render(\r\n    <React.StrictMode>\r\n        <I18nextProvider i18n={i18next}>\r\n            <HelmetProvider>\r\n                <RouterProvider router={router} />\r\n            </HelmetProvider>\r\n        </I18nextProvider>\r\n    </React.StrictMode>\r\n);\r\n"],"file":"assets/index-Darz4a5I.js"}